{"ast":null,"code":"'use strict';\n/**\n * Module dependencies.\n */\n\nvar http = require('http');\n\nvar read = require('fs').readFileSync;\n\nvar path = require('path');\n\nvar exists = require('fs').existsSync;\n\nvar engine = require('engine.io');\n\nvar clientVersion = require('socket.io-client/package.json').version;\n\nvar Client = require('./client');\n\nvar Emitter = require('events').EventEmitter;\n\nvar Namespace = require('./namespace');\n\nvar ParentNamespace = require('./parent-namespace');\n\nvar Adapter = require('socket.io-adapter');\n\nvar parser = require('socket.io-parser');\n\nvar debug = require('debug')('socket.io:server');\n\nvar url = require('url');\n/**\n * Module exports.\n */\n\n\nmodule.exports = Server;\n/**\n * Socket.IO client source.\n */\n\nvar clientSource = undefined;\nvar clientSourceMap = undefined;\n/**\n * Server constructor.\n *\n * @param {http.Server|Number|Object} srv http server, port or options\n * @param {Object} [opts]\n * @api public\n */\n\nfunction Server(srv, opts) {\n  if (!(this instanceof Server)) return new Server(srv, opts);\n\n  if ('object' == typeof srv && srv instanceof Object && !srv.listen) {\n    opts = srv;\n    srv = null;\n  }\n\n  opts = opts || {};\n  this.nsps = {};\n  this.parentNsps = new Map();\n  this.path(opts.path || '/socket.io');\n  this.serveClient(false !== opts.serveClient);\n  this.parser = opts.parser || parser;\n  this.encoder = new this.parser.Encoder();\n  this.adapter(opts.adapter || Adapter);\n  this.origins(opts.origins || '*:*');\n  this.sockets = this.of('/');\n  if (srv) this.attach(srv, opts);\n}\n/**\n * Server request verification function, that checks for allowed origins\n *\n * @param {http.IncomingMessage} req request\n * @param {Function} fn callback to be called with the result: `fn(err, success)`\n */\n\n\nServer.prototype.checkRequest = function (req, fn) {\n  var origin = req.headers.origin || req.headers.referer; // file:// URLs produce a null Origin which can't be authorized via echo-back\n\n  if ('null' == origin || null == origin) origin = '*';\n  if (!!origin && typeof this._origins == 'function') return this._origins(origin, fn);\n  if (this._origins.indexOf('*:*') !== -1) return fn(null, true);\n\n  if (origin) {\n    try {\n      var parts = url.parse(origin);\n      var defaultPort = 'https:' == parts.protocol ? 443 : 80;\n      parts.port = parts.port != null ? parts.port : defaultPort;\n      var ok = ~this._origins.indexOf(parts.protocol + '//' + parts.hostname + ':' + parts.port) || ~this._origins.indexOf(parts.hostname + ':' + parts.port) || ~this._origins.indexOf(parts.hostname + ':*') || ~this._origins.indexOf('*:' + parts.port);\n      debug('origin %s is %svalid', origin, !!ok ? '' : 'not ');\n      return fn(null, !!ok);\n    } catch (ex) {}\n  }\n\n  fn(null, false);\n};\n/**\n * Sets/gets whether client code is being served.\n *\n * @param {Boolean} v whether to serve client code\n * @return {Server|Boolean} self when setting or value when getting\n * @api public\n */\n\n\nServer.prototype.serveClient = function (v) {\n  if (!arguments.length) return this._serveClient;\n  this._serveClient = v;\n\n  var resolvePath = function (file) {\n    var filepath = path.resolve(__dirname, './../../', file);\n\n    if (exists(filepath)) {\n      return filepath;\n    }\n\n    return require.resolve(file);\n  };\n\n  if (v && !clientSource) {\n    clientSource = read(resolvePath('socket.io-client/dist/socket.io.js'), 'utf-8');\n\n    try {\n      clientSourceMap = read(resolvePath('socket.io-client/dist/socket.io.js.map'), 'utf-8');\n    } catch (err) {\n      debug('could not load sourcemap file');\n    }\n  }\n\n  return this;\n};\n/**\n * Old settings for backwards compatibility\n */\n\n\nvar oldSettings = {\n  \"transports\": \"transports\",\n  \"heartbeat timeout\": \"pingTimeout\",\n  \"heartbeat interval\": \"pingInterval\",\n  \"destroy buffer size\": \"maxHttpBufferSize\"\n};\n/**\n * Backwards compatibility.\n *\n * @api public\n */\n\nServer.prototype.set = function (key, val) {\n  if ('authorization' == key && val) {\n    this.use(function (socket, next) {\n      val(socket.request, function (err, authorized) {\n        if (err) return next(new Error(err));\n        if (!authorized) return next(new Error('Not authorized'));\n        next();\n      });\n    });\n  } else if ('origins' == key && val) {\n    this.origins(val);\n  } else if ('resource' == key) {\n    this.path(val);\n  } else if (oldSettings[key] && this.eio[oldSettings[key]]) {\n    this.eio[oldSettings[key]] = val;\n  } else {\n    console.error('Option %s is not valid. Please refer to the README.', key);\n  }\n\n  return this;\n};\n/**\n * Executes the middleware for an incoming namespace not already created on the server.\n *\n * @param {String} name name of incoming namespace\n * @param {Object} query the query parameters\n * @param {Function} fn callback\n * @api private\n */\n\n\nServer.prototype.checkNamespace = function (name, query, fn) {\n  if (this.parentNsps.size === 0) return fn(false);\n  const keysIterator = this.parentNsps.keys();\n\n  const run = () => {\n    let nextFn = keysIterator.next();\n\n    if (nextFn.done) {\n      return fn(false);\n    }\n\n    nextFn.value(name, query, (err, allow) => {\n      if (err || !allow) {\n        run();\n      } else {\n        fn(this.parentNsps.get(nextFn.value).createChild(name));\n      }\n    });\n  };\n\n  run();\n};\n/**\n * Sets the client serving path.\n *\n * @param {String} v pathname\n * @return {Server|String} self when setting or value when getting\n * @api public\n */\n\n\nServer.prototype.path = function (v) {\n  if (!arguments.length) return this._path;\n  this._path = v.replace(/\\/$/, '');\n  return this;\n};\n/**\n * Sets the adapter for rooms.\n *\n * @param {Adapter} v pathname\n * @return {Server|Adapter} self when setting or value when getting\n * @api public\n */\n\n\nServer.prototype.adapter = function (v) {\n  if (!arguments.length) return this._adapter;\n  this._adapter = v;\n\n  for (var i in this.nsps) {\n    if (this.nsps.hasOwnProperty(i)) {\n      this.nsps[i].initAdapter();\n    }\n  }\n\n  return this;\n};\n/**\n * Sets the allowed origins for requests.\n *\n * @param {String|String[]} v origins\n * @return {Server|Adapter} self when setting or value when getting\n * @api public\n */\n\n\nServer.prototype.origins = function (v) {\n  if (!arguments.length) return this._origins;\n  this._origins = v;\n  return this;\n};\n/**\n * Attaches socket.io to a server or port.\n *\n * @param {http.Server|Number} server or port\n * @param {Object} options passed to engine.io\n * @return {Server} self\n * @api public\n */\n\n\nServer.prototype.listen = Server.prototype.attach = function (srv, opts) {\n  if ('function' == typeof srv) {\n    var msg = 'You are trying to attach socket.io to an express ' + 'request handler function. Please pass a http.Server instance.';\n    throw new Error(msg);\n  } // handle a port as a string\n\n\n  if (Number(srv) == srv) {\n    srv = Number(srv);\n  }\n\n  if ('number' == typeof srv) {\n    debug('creating http server and binding to %d', srv);\n    var port = srv;\n    srv = http.Server(function (req, res) {\n      res.writeHead(404);\n      res.end();\n    });\n    srv.listen(port);\n  } // set engine.io path to `/socket.io`\n\n\n  opts = opts || {};\n  opts.path = opts.path || this.path(); // set origins verification\n\n  opts.allowRequest = opts.allowRequest || this.checkRequest.bind(this);\n\n  if (this.sockets.fns.length > 0) {\n    this.initEngine(srv, opts);\n    return this;\n  }\n\n  var self = this;\n  var connectPacket = {\n    type: parser.CONNECT,\n    nsp: '/'\n  };\n  this.encoder.encode(connectPacket, function (encodedPacket) {\n    // the CONNECT packet will be merged with Engine.IO handshake,\n    // to reduce the number of round trips\n    opts.initialPacket = encodedPacket;\n    self.initEngine(srv, opts);\n  });\n  return this;\n};\n/**\n * Initialize engine\n *\n * @param {Object} options passed to engine.io\n * @api private\n */\n\n\nServer.prototype.initEngine = function (srv, opts) {\n  // initialize engine\n  debug('creating engine.io instance with opts %j', opts);\n  this.eio = engine.attach(srv, opts); // attach static file serving\n\n  if (this._serveClient) this.attachServe(srv); // Export http server\n\n  this.httpServer = srv; // bind to engine events\n\n  this.bind(this.eio);\n};\n/**\n * Attaches the static file serving.\n *\n * @param {Function|http.Server} srv http server\n * @api private\n */\n\n\nServer.prototype.attachServe = function (srv) {\n  debug('attaching client serving req handler');\n  var url = this._path + '/socket.io.js';\n  var urlMap = this._path + '/socket.io.js.map';\n  var evs = srv.listeners('request').slice(0);\n  var self = this;\n  srv.removeAllListeners('request');\n  srv.on('request', function (req, res) {\n    if (0 === req.url.indexOf(urlMap)) {\n      self.serveMap(req, res);\n    } else if (0 === req.url.indexOf(url)) {\n      self.serve(req, res);\n    } else {\n      for (var i = 0; i < evs.length; i++) {\n        evs[i].call(srv, req, res);\n      }\n    }\n  });\n};\n/**\n * Handles a request serving `/socket.io.js`\n *\n * @param {http.Request} req\n * @param {http.Response} res\n * @api private\n */\n\n\nServer.prototype.serve = function (req, res) {\n  // Per the standard, ETags must be quoted:\n  // https://tools.ietf.org/html/rfc7232#section-2.3\n  var expectedEtag = '\"' + clientVersion + '\"';\n  var etag = req.headers['if-none-match'];\n\n  if (etag) {\n    if (expectedEtag == etag) {\n      debug('serve client 304');\n      res.writeHead(304);\n      res.end();\n      return;\n    }\n  }\n\n  debug('serve client source');\n  res.setHeader(\"Cache-Control\", \"public, max-age=0\");\n  res.setHeader('Content-Type', 'application/javascript');\n  res.setHeader('ETag', expectedEtag);\n  res.writeHead(200);\n  res.end(clientSource);\n};\n/**\n * Handles a request serving `/socket.io.js.map`\n *\n * @param {http.Request} req\n * @param {http.Response} res\n * @api private\n */\n\n\nServer.prototype.serveMap = function (req, res) {\n  // Per the standard, ETags must be quoted:\n  // https://tools.ietf.org/html/rfc7232#section-2.3\n  var expectedEtag = '\"' + clientVersion + '\"';\n  var etag = req.headers['if-none-match'];\n\n  if (etag) {\n    if (expectedEtag == etag) {\n      debug('serve client 304');\n      res.writeHead(304);\n      res.end();\n      return;\n    }\n  }\n\n  debug('serve client sourcemap');\n  res.setHeader('Content-Type', 'application/json');\n  res.setHeader('ETag', expectedEtag);\n  res.writeHead(200);\n  res.end(clientSourceMap);\n};\n/**\n * Binds socket.io to an engine.io instance.\n *\n * @param {engine.Server} engine engine.io (or compatible) server\n * @return {Server} self\n * @api public\n */\n\n\nServer.prototype.bind = function (engine) {\n  this.engine = engine;\n  this.engine.on('connection', this.onconnection.bind(this));\n  return this;\n};\n/**\n * Called with each incoming transport connection.\n *\n * @param {engine.Socket} conn\n * @return {Server} self\n * @api public\n */\n\n\nServer.prototype.onconnection = function (conn) {\n  debug('incoming connection with id %s', conn.id);\n  var client = new Client(this, conn);\n  client.connect('/');\n  return this;\n};\n/**\n * Looks up a namespace.\n *\n * @param {String|RegExp|Function} name nsp name\n * @param {Function} [fn] optional, nsp `connection` ev handler\n * @api public\n */\n\n\nServer.prototype.of = function (name, fn) {\n  if (typeof name === 'function' || name instanceof RegExp) {\n    const parentNsp = new ParentNamespace(this);\n    debug('initializing parent namespace %s', parentNsp.name);\n\n    if (typeof name === 'function') {\n      this.parentNsps.set(name, parentNsp);\n    } else {\n      this.parentNsps.set((nsp, conn, next) => next(null, name.test(nsp)), parentNsp);\n    }\n\n    if (fn) parentNsp.on('connect', fn);\n    return parentNsp;\n  }\n\n  if (String(name)[0] !== '/') name = '/' + name;\n  var nsp = this.nsps[name];\n\n  if (!nsp) {\n    debug('initializing namespace %s', name);\n    nsp = new Namespace(this, name);\n    this.nsps[name] = nsp;\n  }\n\n  if (fn) nsp.on('connect', fn);\n  return nsp;\n};\n/**\n * Closes server connection\n *\n * @param {Function} [fn] optional, called as `fn([err])` on error OR all conns closed\n * @api public\n */\n\n\nServer.prototype.close = function (fn) {\n  for (var id in this.nsps['/'].sockets) {\n    if (this.nsps['/'].sockets.hasOwnProperty(id)) {\n      this.nsps['/'].sockets[id].onclose();\n    }\n  }\n\n  this.engine.close();\n\n  if (this.httpServer) {\n    this.httpServer.close(fn);\n  } else {\n    fn && fn();\n  }\n};\n/**\n * Expose main namespace (/).\n */\n\n\nvar emitterMethods = Object.keys(Emitter.prototype).filter(function (key) {\n  return typeof Emitter.prototype[key] === 'function';\n});\nemitterMethods.concat(['to', 'in', 'use', 'send', 'write', 'clients', 'compress', 'binary']).forEach(function (fn) {\n  Server.prototype[fn] = function () {\n    return this.sockets[fn].apply(this.sockets, arguments);\n  };\n});\nNamespace.flags.forEach(function (flag) {\n  Object.defineProperty(Server.prototype, flag, {\n    get: function () {\n      this.sockets.flags = this.sockets.flags || {};\n      this.sockets.flags[flag] = true;\n      return this;\n    }\n  });\n});\n/**\n * BC with `io.listen`\n */\n\nServer.listen = Server;","map":null,"metadata":{},"sourceType":"script"}