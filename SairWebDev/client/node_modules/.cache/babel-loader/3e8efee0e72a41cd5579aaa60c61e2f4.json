{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar EventEmitter = require('events').EventEmitter;\n\nvar parser = require('engine.io-parser');\n\nvar util = require('util');\n\nvar debug = require('debug')('engine:transport');\n/**\n * Expose the constructor.\n */\n\n\nmodule.exports = Transport;\n/**\n * Noop function.\n *\n * @api private\n */\n\nfunction noop() {}\n/**\n * Transport constructor.\n *\n * @param {http.IncomingMessage} request\n * @api public\n */\n\n\nfunction Transport(req) {\n  this.readyState = 'open';\n  this.discarded = false;\n}\n/**\n * Inherits from EventEmitter.\n */\n\n\nutil.inherits(Transport, EventEmitter);\n/**\n * Flags the transport as discarded.\n *\n * @api private\n */\n\nTransport.prototype.discard = function () {\n  this.discarded = true;\n};\n/**\n * Called with an incoming HTTP request.\n *\n * @param {http.IncomingMessage} request\n * @api private\n */\n\n\nTransport.prototype.onRequest = function (req) {\n  debug('setting request');\n  this.req = req;\n};\n/**\n * Closes the transport.\n *\n * @api private\n */\n\n\nTransport.prototype.close = function (fn) {\n  if ('closed' === this.readyState || 'closing' === this.readyState) return;\n  this.readyState = 'closing';\n  this.doClose(fn || noop);\n};\n/**\n * Called with a transport error.\n *\n * @param {String} message error\n * @param {Object} error description\n * @api private\n */\n\n\nTransport.prototype.onError = function (msg, desc) {\n  if (this.listeners('error').length) {\n    var err = new Error(msg);\n    err.type = 'TransportError';\n    err.description = desc;\n    this.emit('error', err);\n  } else {\n    debug('ignored transport error %s (%s)', msg, desc);\n  }\n};\n/**\n * Called with parsed out a packets from the data stream.\n *\n * @param {Object} packet\n * @api private\n */\n\n\nTransport.prototype.onPacket = function (packet) {\n  this.emit('packet', packet);\n};\n/**\n * Called with the encoded packet data.\n *\n * @param {String} data\n * @api private\n */\n\n\nTransport.prototype.onData = function (data) {\n  this.onPacket(parser.decodePacket(data));\n};\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\n\nTransport.prototype.onClose = function () {\n  this.readyState = 'closed';\n  this.emit('close');\n};","map":null,"metadata":{},"sourceType":"script"}