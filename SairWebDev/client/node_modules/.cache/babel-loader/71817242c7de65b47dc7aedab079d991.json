{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Emitter = require('events').EventEmitter;\n\nvar parser = require('socket.io-parser');\n\nvar hasBin = require('has-binary2');\n\nvar url = require('url');\n\nvar debug = require('debug')('socket.io:socket');\n/**\n * Module exports.\n */\n\n\nmodule.exports = exports = Socket;\n/**\n * Blacklisted events.\n *\n * @api public\n */\n\nexports.events = ['error', 'connect', 'disconnect', 'disconnecting', 'newListener', 'removeListener'];\n/**\n * Flags.\n *\n * @api private\n */\n\nvar flags = ['json', 'volatile', 'broadcast', 'local'];\n/**\n * `EventEmitter#emit` reference.\n */\n\nvar emit = Emitter.prototype.emit;\n/**\n * Interface to a `Client` for a given `Namespace`.\n *\n * @param {Namespace} nsp\n * @param {Client} client\n * @api public\n */\n\nfunction Socket(nsp, client, query) {\n  this.nsp = nsp;\n  this.server = nsp.server;\n  this.adapter = this.nsp.adapter;\n  this.id = nsp.name !== '/' ? nsp.name + '#' + client.id : client.id;\n  this.client = client;\n  this.conn = client.conn;\n  this.rooms = {};\n  this.acks = {};\n  this.connected = true;\n  this.disconnected = false;\n  this.handshake = this.buildHandshake(query);\n  this.fns = [];\n  this.flags = {};\n  this._rooms = [];\n}\n/**\n * Inherits from `EventEmitter`.\n */\n\n\nSocket.prototype.__proto__ = Emitter.prototype;\n/**\n * Apply flags from `Socket`.\n */\n\nflags.forEach(function (flag) {\n  Object.defineProperty(Socket.prototype, flag, {\n    get: function () {\n      this.flags[flag] = true;\n      return this;\n    }\n  });\n});\n/**\n * `request` engine.io shortcut.\n *\n * @api public\n */\n\nObject.defineProperty(Socket.prototype, 'request', {\n  get: function () {\n    return this.conn.request;\n  }\n});\n/**\n * Builds the `handshake` BC object\n *\n * @api private\n */\n\nSocket.prototype.buildHandshake = function (query) {\n  var self = this;\n\n  function buildQuery() {\n    var requestQuery = url.parse(self.request.url, true).query; //if socket-specific query exist, replace query strings in requestQuery\n\n    return Object.assign({}, query, requestQuery);\n  }\n\n  return {\n    headers: this.request.headers,\n    time: new Date() + '',\n    address: this.conn.remoteAddress,\n    xdomain: !!this.request.headers.origin,\n    secure: !!this.request.connection.encrypted,\n    issued: +new Date(),\n    url: this.request.url,\n    query: buildQuery()\n  };\n};\n/**\n * Emits to this client.\n *\n * @return {Socket} self\n * @api public\n */\n\n\nSocket.prototype.emit = function (ev) {\n  if (~exports.events.indexOf(ev)) {\n    emit.apply(this, arguments);\n    return this;\n  }\n\n  var args = Array.prototype.slice.call(arguments);\n  var packet = {\n    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,\n    data: args\n  }; // access last argument to see if it's an ACK callback\n\n  if (typeof args[args.length - 1] === 'function') {\n    if (this._rooms.length || this.flags.broadcast) {\n      throw new Error('Callbacks are not supported when broadcasting');\n    }\n\n    debug('emitting packet with ack id %d', this.nsp.ids);\n    this.acks[this.nsp.ids] = args.pop();\n    packet.id = this.nsp.ids++;\n  }\n\n  var rooms = this._rooms.slice(0);\n\n  var flags = Object.assign({}, this.flags); // reset flags\n\n  this._rooms = [];\n  this.flags = {};\n\n  if (rooms.length || flags.broadcast) {\n    this.adapter.broadcast(packet, {\n      except: [this.id],\n      rooms: rooms,\n      flags: flags\n    });\n  } else {\n    // dispatch packet\n    this.packet(packet, flags);\n  }\n\n  return this;\n};\n/**\n * Targets a room when broadcasting.\n *\n * @param {String} name\n * @return {Socket} self\n * @api public\n */\n\n\nSocket.prototype.to = Socket.prototype.in = function (name) {\n  if (!~this._rooms.indexOf(name)) this._rooms.push(name);\n  return this;\n};\n/**\n * Sends a `message` event.\n *\n * @return {Socket} self\n * @api public\n */\n\n\nSocket.prototype.send = Socket.prototype.write = function () {\n  var args = Array.prototype.slice.call(arguments);\n  args.unshift('message');\n  this.emit.apply(this, args);\n  return this;\n};\n/**\n * Writes a packet.\n *\n * @param {Object} packet object\n * @param {Object} opts options\n * @api private\n */\n\n\nSocket.prototype.packet = function (packet, opts) {\n  packet.nsp = this.nsp.name;\n  opts = opts || {};\n  opts.compress = false !== opts.compress;\n  this.client.packet(packet, opts);\n};\n/**\n * Joins a room.\n *\n * @param {String|Array} room or array of rooms\n * @param {Function} fn optional, callback\n * @return {Socket} self\n * @api private\n */\n\n\nSocket.prototype.join = function (rooms, fn) {\n  debug('joining room %s', rooms);\n  var self = this;\n\n  if (!Array.isArray(rooms)) {\n    rooms = [rooms];\n  }\n\n  rooms = rooms.filter(function (room) {\n    return !self.rooms.hasOwnProperty(room);\n  });\n\n  if (!rooms.length) {\n    fn && fn(null);\n    return this;\n  }\n\n  this.adapter.addAll(this.id, rooms, function (err) {\n    if (err) return fn && fn(err);\n    debug('joined room %s', rooms);\n    rooms.forEach(function (room) {\n      self.rooms[room] = room;\n    });\n    fn && fn(null);\n  });\n  return this;\n};\n/**\n * Leaves a room.\n *\n * @param {String} room\n * @param {Function} fn optional, callback\n * @return {Socket} self\n * @api private\n */\n\n\nSocket.prototype.leave = function (room, fn) {\n  debug('leave room %s', room);\n  var self = this;\n  this.adapter.del(this.id, room, function (err) {\n    if (err) return fn && fn(err);\n    debug('left room %s', room);\n    delete self.rooms[room];\n    fn && fn(null);\n  });\n  return this;\n};\n/**\n * Leave all rooms.\n *\n * @api private\n */\n\n\nSocket.prototype.leaveAll = function () {\n  this.adapter.delAll(this.id);\n  this.rooms = {};\n};\n/**\n * Called by `Namespace` upon successful\n * middleware execution (ie: authorization).\n * Socket is added to namespace array before\n * call to join, so adapters can access it.\n *\n * @api private\n */\n\n\nSocket.prototype.onconnect = function () {\n  debug('socket connected - writing packet');\n  this.nsp.connected[this.id] = this;\n  this.join(this.id);\n  var skip = this.nsp.name === '/' && this.nsp.fns.length === 0;\n\n  if (skip) {\n    debug('packet already sent in initial handshake');\n  } else {\n    this.packet({\n      type: parser.CONNECT\n    });\n  }\n};\n/**\n * Called with each packet. Called by `Client`.\n *\n * @param {Object} packet\n * @api private\n */\n\n\nSocket.prototype.onpacket = function (packet) {\n  debug('got packet %j', packet);\n\n  switch (packet.type) {\n    case parser.EVENT:\n      this.onevent(packet);\n      break;\n\n    case parser.BINARY_EVENT:\n      this.onevent(packet);\n      break;\n\n    case parser.ACK:\n      this.onack(packet);\n      break;\n\n    case parser.BINARY_ACK:\n      this.onack(packet);\n      break;\n\n    case parser.DISCONNECT:\n      this.ondisconnect();\n      break;\n\n    case parser.ERROR:\n      this.onerror(new Error(packet.data));\n  }\n};\n/**\n * Called upon event packet.\n *\n * @param {Object} packet object\n * @api private\n */\n\n\nSocket.prototype.onevent = function (packet) {\n  var args = packet.data || [];\n  debug('emitting event %j', args);\n\n  if (null != packet.id) {\n    debug('attaching ack callback to event');\n    args.push(this.ack(packet.id));\n  }\n\n  this.dispatch(args);\n};\n/**\n * Produces an ack callback to emit with an event.\n *\n * @param {Number} id packet id\n * @api private\n */\n\n\nSocket.prototype.ack = function (id) {\n  var self = this;\n  var sent = false;\n  return function () {\n    // prevent double callbacks\n    if (sent) return;\n    var args = Array.prototype.slice.call(arguments);\n    debug('sending ack %j', args);\n    self.packet({\n      id: id,\n      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,\n      data: args\n    });\n    sent = true;\n  };\n};\n/**\n * Called upon ack packet.\n *\n * @api private\n */\n\n\nSocket.prototype.onack = function (packet) {\n  var ack = this.acks[packet.id];\n\n  if ('function' == typeof ack) {\n    debug('calling ack %s with %j', packet.id, packet.data);\n    ack.apply(this, packet.data);\n    delete this.acks[packet.id];\n  } else {\n    debug('bad ack %s', packet.id);\n  }\n};\n/**\n * Called upon client disconnect packet.\n *\n * @api private\n */\n\n\nSocket.prototype.ondisconnect = function () {\n  debug('got disconnect packet');\n  this.onclose('client namespace disconnect');\n};\n/**\n * Handles a client error.\n *\n * @api private\n */\n\n\nSocket.prototype.onerror = function (err) {\n  if (this.listeners('error').length) {\n    this.emit('error', err);\n  } else {\n    console.error('Missing error handler on `socket`.');\n    console.error(err.stack);\n  }\n};\n/**\n * Called upon closing. Called by `Client`.\n *\n * @param {String} reason\n * @throw {Error} optional error object\n * @api private\n */\n\n\nSocket.prototype.onclose = function (reason) {\n  if (!this.connected) return this;\n  debug('closing socket - reason %s', reason);\n  this.emit('disconnecting', reason);\n  this.leaveAll();\n  this.nsp.remove(this);\n  this.client.remove(this);\n  this.connected = false;\n  this.disconnected = true;\n  delete this.nsp.connected[this.id];\n  this.emit('disconnect', reason);\n};\n/**\n * Produces an `error` packet.\n *\n * @param {Object} err error object\n * @api private\n */\n\n\nSocket.prototype.error = function (err) {\n  this.packet({\n    type: parser.ERROR,\n    data: err\n  });\n};\n/**\n * Disconnects this client.\n *\n * @param {Boolean} close if `true`, closes the underlying connection\n * @return {Socket} self\n * @api public\n */\n\n\nSocket.prototype.disconnect = function (close) {\n  if (!this.connected) return this;\n\n  if (close) {\n    this.client.disconnect();\n  } else {\n    this.packet({\n      type: parser.DISCONNECT\n    });\n    this.onclose('server namespace disconnect');\n  }\n\n  return this;\n};\n/**\n * Sets the compress flag.\n *\n * @param {Boolean} compress if `true`, compresses the sending data\n * @return {Socket} self\n * @api public\n */\n\n\nSocket.prototype.compress = function (compress) {\n  this.flags.compress = compress;\n  return this;\n};\n/**\n * Sets the binary flag\n *\n * @param {Boolean} Encode as if it has binary data if `true`, Encode as if it doesnt have binary data if `false`\n * @return {Socket} self\n * @api public\n */\n\n\nSocket.prototype.binary = function (binary) {\n  this.flags.binary = binary;\n  return this;\n};\n/**\n * Dispatch incoming event to socket listeners.\n *\n * @param {Array} event that will get emitted\n * @api private\n */\n\n\nSocket.prototype.dispatch = function (event) {\n  debug('dispatching an event %j', event);\n  var self = this;\n\n  function dispatchSocket(err) {\n    process.nextTick(function () {\n      if (err) {\n        return self.error(err.data || err.message);\n      }\n\n      emit.apply(self, event);\n    });\n  }\n\n  this.run(event, dispatchSocket);\n};\n/**\n * Sets up socket middleware.\n *\n * @param {Function} middleware function (event, next)\n * @return {Socket} self\n * @api public\n */\n\n\nSocket.prototype.use = function (fn) {\n  this.fns.push(fn);\n  return this;\n};\n/**\n * Executes the middleware for an incoming event.\n *\n * @param {Array} event that will get emitted\n * @param {Function} last fn call in the middleware\n * @api private\n */\n\n\nSocket.prototype.run = function (event, fn) {\n  var fns = this.fns.slice(0);\n  if (!fns.length) return fn(null);\n\n  function run(i) {\n    fns[i](event, function (err) {\n      // upon error, short-circuit\n      if (err) return fn(err); // if no middleware left, summon callback\n\n      if (!fns[i + 1]) return fn(null); // go on to next\n\n      run(i + 1);\n    });\n  }\n\n  run(0);\n};","map":null,"metadata":{},"sourceType":"script"}