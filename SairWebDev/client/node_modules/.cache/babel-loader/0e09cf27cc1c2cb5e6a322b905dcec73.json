{"ast":null,"code":"import _slicedToArray from \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/VideoChatting/Videochat.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Peer from \"peerjs\";\nimport socketIOClient from \"socket.io-client\";\nlet client = {};\n\nconst Videochat = () => {\n  const _useState = useState({\n    response: \"false\",\n    endpoint: \"http://127.0.0.1:5000\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        socketinfo = _useState2[0],\n        setsocketinfo = _useState2[1];\n\n  const socket = socketIOClient(socketinfo.endpoint);\n  var str = null;\n  useEffect(() => {\n    console.log(\"Trying to establish connection\");\n    socket.emit(\"CheckConnection\", \"Message\");\n    console.log(\"Connection Established\");\n    const video = document.querySelector(\"video\");\n    const clientId = location.hostname.toString(); //Taking media services\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(socket.emit(\"NewClient\", clientId));\n    video.srcObject = stre;\n  });\n\n  function initPeer() {}\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Video\", React.createElement(\"video\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })));\n};\n\nexport default Videochat;","map":{"version":3,"sources":["/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/VideoChatting/Videochat.js"],"names":["React","Fragment","useState","useEffect","Peer","socketIOClient","client","Videochat","response","endpoint","socketinfo","setsocketinfo","socket","str","console","log","emit","video","document","querySelector","clientId","location","hostname","toString","navigator","mediaDevices","getUserMedia","audio","then","srcObject","stre","initPeer"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,IAAIC,MAAM,GAAG,EAAb;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACcL,QAAQ,CAAC;AAC3CM,IAAAA,QAAQ,EAAE,OADiC;AAE3CC,IAAAA,QAAQ,EAAE;AAFiC,GAAD,CADtB;AAAA;AAAA,QACfC,UADe;AAAA,QACHC,aADG;;AAKtB,QAAMC,MAAM,GAAGP,cAAc,CAACK,UAAU,CAACD,QAAZ,CAA7B;AACA,MAAII,GAAG,GAAG,IAAV;AACAV,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAH,IAAAA,MAAM,CAACI,IAAP,CAAY,iBAAZ,EAA+B,SAA/B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,UAAME,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACA,UAAMC,QAAQ,GAAGC,QAAQ,CAACC,QAAT,CAAkBC,QAAlB,EAAjB,CALc,CAMd;;AACAC,IAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgB;AAAET,MAAAA,KAAK,EAAE,IAAT;AAAeU,MAAAA,KAAK,EAAE;AAAtB,KADhB,EAEGC,IAFH,CAEQhB,MAAM,CAACI,IAAP,CAAY,WAAZ,EAAyBI,QAAzB,CAFR;AAIAH,IAAAA,KAAK,CAACY,SAAN,GAAkBC,IAAlB;AACD,GAZQ,CAAT;;AAaA,WAASC,QAAT,GAAoB,CAAE;;AACtB,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF;AAQD,CA7BD;;AA+BA,eAAexB,SAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport Peer from \"peerjs\";\nimport socketIOClient from \"socket.io-client\";\n\nlet client = {};\n\nconst Videochat = () => {\n  const [socketinfo, setsocketinfo] = useState({\n    response: \"false\",\n    endpoint: \"http://127.0.0.1:5000\"\n  });\n  const socket = socketIOClient(socketinfo.endpoint);\n  var str = null;\n  useEffect(() => {\n    console.log(\"Trying to establish connection\");\n    socket.emit(\"CheckConnection\", \"Message\");\n    console.log(\"Connection Established\");\n    const video = document.querySelector(\"video\");\n    const clientId = location.hostname.toString();\n    //Taking media services\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then(socket.emit(\"NewClient\", clientId));\n\n    video.srcObject = stre;\n  });\n  function initPeer() {}\n  return (\n    <Fragment>\n      <div>\n        Video\n        <video />\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Videochat;\n"]},"metadata":{},"sourceType":"module"}