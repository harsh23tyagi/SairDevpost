{"ast":null,"code":"var _jsxFileName = \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/videosegmentation/Videochat.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\"; // let Peer = require(\"simple-peer\");\n// import * as Peer from \"simple-peer\";\n\nimport Peer from \"peerjs\"; // let Peer = require(\"simple-peer\");\n// const video = document.querySelector(\"video\");\n\nlet client = {}; // We can also pass an object with width and height for the video parameter of the getUSerMedia\n\nconst Videochat = () => {\n  // const [socketinfo, setsocketinfo] = useState({\n  //   response: \"false\",\n  //   endpoint: \"http://127.0.0.1:5000\"\n  // });\n  // const socket = socketIOClient(socketinfo.endpoint);\n  // var str = null;\n  let socket = io();\n  useEffect(() => {\n    const video = document.querySelector(\"video\"); //Getting our own video\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      socket.emit(\"NewClient\");\n      video.srcObject = stream;\n      video.play(); //Initializing Peer\n\n      function InitPeer(type) {\n        let peer = new Peer({\n          initiator: type == \"init\" ? true : false,\n          stream: stream,\n          trickle: false\n        }); //   socket.emit(\"connectReq\");\n\n        CreateVideo(stream); //   socket.emit(\"NewStream\", \"Newclientadded\");\n\n        peer.on(\"stream\", function (stream) {\n          CreateVideo(stream);\n        }); //This isn't working in chrome; works perfectly in firefox.\n        // peer.on('close', function () {\n        //     document.getElementById(\"peerVideo\").remove();\n        //     peer.destroy()\n        // })\n\n        peer.on(\"data\", function (data) {\n          CreateVideo(stream);\n          let decodedData = new TextDecoder(\"utf-8\").decode(data);\n          let peervideo = document.querySelector(\"#peerVideo\");\n          peervideo.style.filter = decodedData;\n        });\n        return peer;\n      } //for peer of type init\n\n\n      function MakePeer() {\n        console.log(\"Request to create peer\");\n        client.gotAnswer = false;\n        let peer = InitPeer(\"init\");\n        peer.on(\"signal\", function (data) {\n          if (!client.gotAnswer) {\n            socket.emit(\"Offer\", data);\n          }\n        });\n        client.peer = peer;\n      } //for peer of type not init\n\n\n      function FrontAnswer(offer) {\n        let peer = InitPeer(\"notInit\");\n        peer.on(\"signal\", data => {\n          socket.emit(\"Answer\", data);\n        });\n        peer.signal(offer);\n        client.peer = peer;\n      }\n\n      function SignalAnswer(answer) {\n        client.gotAnswer = true;\n        let peer = client.peer;\n        peer.signal(answer);\n      }\n\n      function CreateVideo(stream) {\n        //   CreateDiv();\n        let video = document.createElement(\"video\");\n        video.id = \"peerVideo\";\n        video.srcObject = stream;\n        video.setAttribute(\"class\", \"embed-responsive-item\");\n        document.querySelector(\"#peerVideo\").appendChild(video);\n        video.play(); //wait for 1 sec\n        //   setTimeout(() => SendFilter(currentFilter), 1000);\n        //   video.addEventListener(\"click\", () => {\n        //     if (video.volume != 0) video.volume = 0;\n        //     else video.volume = 1;\n        //   });\n      }\n\n      function SessionActive() {\n        document.write(\"Session Active. Please come back later\");\n      }\n\n      function RemovePeer() {\n        document.getElementById(\"peerVideo\").remove(); //   document.getElementById(\"muteText\").remove();\n\n        if (client.peer) {\n          client.peer.destroy();\n        }\n      }\n\n      function reloadPage() {\n        console.log(\"Reloaded\");\n        window.location.reload();\n      }\n\n      socket.on(\"BackOffer\", FrontAnswer);\n      socket.on(\"BackAnswer\", SignalAnswer);\n      socket.on(\"SessionActive\", SessionActive);\n      socket.on(\"CreatePeer\", MakePeer);\n      socket.on(\"Disconnect\", RemovePeer);\n      socket.on(\"reload\", reloadPage);\n    }).catch(err => document.write(err));\n    console.log(\"Own Video Started\"); //create a socket connection\n    //ends the function for useEffect hook\n    //\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row h-100 w-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Gekk\"), React.createElement(\"div\", {\n    className: \"col-6 col-6 d-flex justify-content-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"embed-responsive embed-responseive-16by9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"video\", {\n    className: \"embed-responsive-item\",\n    muted: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"row h-100 w-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-6 col-6 d-flex justify-content-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"peerVideo\",\n    className: \"embed-responsive embed-responseive-16by9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  })))));\n};\n\nexport default Videochat; // import React, { Component } from \"react\";\n// // import socketIOClient from \"socket.io-client\";\n// // class Videochatroom extends Component {\n// //   constructor() {\n// //     super();\n// //     this.state = {\n// //       response: false,\n// //       endpoint: \"http://127.0.0.1:5000\"\n// //     };\n// //   }\n// //   componentDidMount() {\n// //     const { endpoint } = this.state;\n// //     const socket = socketIOClient(endpoint);\n// //     socket.on(\"SetupMsg\", data => {\n// //       this.setState({ response: data });\n// //       console.log(data);\n// //     });\n// //   }\n// //   render() {\n// //     const { response } = this.state;\n// //     return (\n// //       <div style={{ textAlign: \"center\" }}>\n// //         <p>Responding to : {response}</p>\n// //         {response ? (\n// //           <p>The temperature in Florence is: {response} Â°F</p>\n// //         ) : (\n// //           <p>Loading...</p>\n// //         )}\n// //       </div>\n// //     );\n// //   }\n// // }\n// // export default Videochatroom;\n// import React, { Fragment, useState } from \"react\";\n// import socketIOClient from \"socket.io-client\";\n// const Videochatroom = () => {\n//   const [socketinfo, setsocketinfo] = useState({\n//     response: \"false\",\n//     endpoint: \"http://127.0.0.1:5000\"\n//   });\n//   const socket = socketIOClient(socketinfo.endpoint);\n//   socket.on(\"SetupMsg\", data => {\n//     console.log(data);\n//     setsocketinfo({ response: data, endpoint: \"http://127.0.0.1:5000\" });\n//   });\n//   return (\n//     <Fragment>\n//       <div>\n//         <p>Hello world {socketinfo.response} </p>\n//       </div>\n//     </Fragment>\n//   );\n// };\n// export default Videochatroom;","map":{"version":3,"sources":["/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/videosegmentation/Videochat.js"],"names":["React","Fragment","useState","useEffect","socketIOClient","Peer","client","Videochat","socket","io","video","document","querySelector","navigator","mediaDevices","getUserMedia","audio","then","stream","emit","srcObject","play","InitPeer","type","peer","initiator","trickle","CreateVideo","on","data","decodedData","TextDecoder","decode","peervideo","style","filter","MakePeer","console","log","gotAnswer","FrontAnswer","offer","signal","SignalAnswer","answer","createElement","id","setAttribute","appendChild","SessionActive","write","RemovePeer","getElementById","remove","destroy","reloadPage","window","location","reload","catch","err"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n// let Peer = require(\"simple-peer\");\n// import * as Peer from \"simple-peer\";\nimport Peer from \"peerjs\";\n// let Peer = require(\"simple-peer\");\n\n// const video = document.querySelector(\"video\");\nlet client = {};\n\n// We can also pass an object with width and height for the video parameter of the getUSerMedia\nconst Videochat = () => {\n  // const [socketinfo, setsocketinfo] = useState({\n  //   response: \"false\",\n  //   endpoint: \"http://127.0.0.1:5000\"\n  // });\n  // const socket = socketIOClient(socketinfo.endpoint);\n  // var str = null;\n  let socket = io();\n  useEffect(() => {\n    const video = document.querySelector(\"video\");\n\n    //Getting our own video\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then(stream => {\n        socket.emit(\"NewClient\");\n        video.srcObject = stream;\n        video.play();\n\n        //Initializing Peer\n        function InitPeer(type) {\n          let peer = new Peer({\n            initiator: type == \"init\" ? true : false,\n            stream: stream,\n            trickle: false\n          });\n\n          //   socket.emit(\"connectReq\");\n          CreateVideo(stream);\n          //   socket.emit(\"NewStream\", \"Newclientadded\");\n          peer.on(\"stream\", function(stream) {\n            CreateVideo(stream);\n          });\n          //This isn't working in chrome; works perfectly in firefox.\n          // peer.on('close', function () {\n          //     document.getElementById(\"peerVideo\").remove();\n          //     peer.destroy()\n          // })\n          peer.on(\"data\", function(data) {\n            CreateVideo(stream);\n            let decodedData = new TextDecoder(\"utf-8\").decode(data);\n            let peervideo = document.querySelector(\"#peerVideo\");\n            peervideo.style.filter = decodedData;\n          });\n          return peer;\n        }\n\n        //for peer of type init\n        function MakePeer() {\n          console.log(\"Request to create peer\");\n          client.gotAnswer = false;\n          let peer = InitPeer(\"init\");\n          peer.on(\"signal\", function(data) {\n            if (!client.gotAnswer) {\n              socket.emit(\"Offer\", data);\n            }\n          });\n          client.peer = peer;\n        }\n\n        //for peer of type not init\n        function FrontAnswer(offer) {\n          let peer = InitPeer(\"notInit\");\n          peer.on(\"signal\", data => {\n            socket.emit(\"Answer\", data);\n          });\n          peer.signal(offer);\n          client.peer = peer;\n        }\n\n        function SignalAnswer(answer) {\n          client.gotAnswer = true;\n          let peer = client.peer;\n          peer.signal(answer);\n        }\n\n        function CreateVideo(stream) {\n          //   CreateDiv();\n\n          let video = document.createElement(\"video\");\n          video.id = \"peerVideo\";\n          video.srcObject = stream;\n          video.setAttribute(\"class\", \"embed-responsive-item\");\n          document.querySelector(\"#peerVideo\").appendChild(video);\n          video.play();\n          //wait for 1 sec\n          //   setTimeout(() => SendFilter(currentFilter), 1000);\n\n          //   video.addEventListener(\"click\", () => {\n          //     if (video.volume != 0) video.volume = 0;\n          //     else video.volume = 1;\n          //   });\n        }\n\n        function SessionActive() {\n          document.write(\"Session Active. Please come back later\");\n        }\n\n        function RemovePeer() {\n          document.getElementById(\"peerVideo\").remove();\n          //   document.getElementById(\"muteText\").remove();\n          if (client.peer) {\n            client.peer.destroy();\n          }\n        }\n        function reloadPage() {\n          console.log(\"Reloaded\");\n          window.location.reload();\n        }\n        socket.on(\"BackOffer\", FrontAnswer);\n        socket.on(\"BackAnswer\", SignalAnswer);\n        socket.on(\"SessionActive\", SessionActive);\n        socket.on(\"CreatePeer\", MakePeer);\n        socket.on(\"Disconnect\", RemovePeer);\n        socket.on(\"reload\", reloadPage);\n      })\n      .catch(err => document.write(err));\n\n    console.log(\"Own Video Started\");\n\n    //create a socket connection\n\n    //ends the function for useEffect hook\n\n    //\n  }, []);\n\n  return (\n    <Fragment>\n      <div className=\"container\">\n        <div className=\"row h-100 w-100\">\n          <p>Gekk</p>\n          <div className=\"col-6 col-6 d-flex justify-content-center\">\n            <div className=\"embed-responsive embed-responseive-16by9\">\n              <video className=\"embed-responsive-item\" muted />\n              {/* We muted the above video as we dont want to hear our own voice  also the above raios and sizes fix the video to cover the entire screen*/}\n            </div>\n          </div>\n        </div>\n        <div className=\"row h-100 w-100\">\n          <div className=\"col-6 col-6 d-flex justify-content-center\">\n            <div\n              id=\"peerVideo\"\n              className=\"embed-responsive embed-responseive-16by9\"\n            >\n              {/* We muted the above video as we dont want to hear our own voice  also the above raios and sizes fix the video to cover the entire screen*/}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Videochat;\n\n// import React, { Component } from \"react\";\n// // import socketIOClient from \"socket.io-client\";\n\n// // class Videochatroom extends Component {\n// //   constructor() {\n// //     super();\n// //     this.state = {\n// //       response: false,\n// //       endpoint: \"http://127.0.0.1:5000\"\n// //     };\n// //   }\n// //   componentDidMount() {\n// //     const { endpoint } = this.state;\n// //     const socket = socketIOClient(endpoint);\n// //     socket.on(\"SetupMsg\", data => {\n// //       this.setState({ response: data });\n// //       console.log(data);\n// //     });\n// //   }\n// //   render() {\n// //     const { response } = this.state;\n// //     return (\n// //       <div style={{ textAlign: \"center\" }}>\n// //         <p>Responding to : {response}</p>\n// //         {response ? (\n// //           <p>The temperature in Florence is: {response} Â°F</p>\n// //         ) : (\n// //           <p>Loading...</p>\n// //         )}\n// //       </div>\n// //     );\n// //   }\n// // }\n// // export default Videochatroom;\n\n// import React, { Fragment, useState } from \"react\";\n// import socketIOClient from \"socket.io-client\";\n// const Videochatroom = () => {\n//   const [socketinfo, setsocketinfo] = useState({\n//     response: \"false\",\n//     endpoint: \"http://127.0.0.1:5000\"\n//   });\n//   const socket = socketIOClient(socketinfo.endpoint);\n//   socket.on(\"SetupMsg\", data => {\n//     console.log(data);\n//     setsocketinfo({ response: data, endpoint: \"http://127.0.0.1:5000\" });\n//   });\n//   return (\n//     <Fragment>\n//       <div>\n//         <p>Hello world {socketinfo.response} </p>\n//       </div>\n//     </Fragment>\n//   );\n// };\n\n// export default Videochatroom;\n"]},"metadata":{},"sourceType":"module"}