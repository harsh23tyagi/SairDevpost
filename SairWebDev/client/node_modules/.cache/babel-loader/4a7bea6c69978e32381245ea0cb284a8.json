{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Polling = require('./polling');\n\nvar util = require('util');\n/**\n * Module exports.\n */\n\n\nmodule.exports = XHR;\n/**\n * Ajax polling transport.\n *\n * @api public\n */\n\nfunction XHR(req) {\n  Polling.call(this, req);\n}\n/**\n * Inherits from Polling.\n */\n\n\nutil.inherits(XHR, Polling);\n/**\n * Overrides `onRequest` to handle `OPTIONS`..\n *\n * @param {http.IncomingMessage}\n * @api private\n */\n\nXHR.prototype.onRequest = function (req) {\n  if ('OPTIONS' === req.method) {\n    var res = req.res;\n    var headers = this.headers(req);\n    headers['Access-Control-Allow-Headers'] = 'Content-Type';\n    res.writeHead(200, headers);\n    res.end();\n  } else {\n    Polling.prototype.onRequest.call(this, req);\n  }\n};\n/**\n * Returns headers for a response.\n *\n * @param {http.IncomingMessage} request\n * @param {Object} extra headers\n * @api private\n */\n\n\nXHR.prototype.headers = function (req, headers) {\n  headers = headers || {};\n\n  if (req.headers.origin) {\n    headers['Access-Control-Allow-Credentials'] = 'true';\n    headers['Access-Control-Allow-Origin'] = req.headers.origin;\n  } else {\n    headers['Access-Control-Allow-Origin'] = '*';\n  }\n\n  return Polling.prototype.headers.call(this, req, headers);\n};","map":null,"metadata":{},"sourceType":"script"}