{"ast":null,"code":"var _jsxFileName = \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/videosegmentation/Videochatroom.js\";\nimport React, { Fragment, useState } from \"react\";\nimport Peer from \"peerjs\";\n\nconst Videochatroom = () => {\n  var conn = peer.connect(destId);\n  conn.send(\"hello\");\n  conn.on(\"data\", function (data) {\n    console.log(data);\n  });\n  useEffect(() => {\n    const video = document.querySelector(\"video\");\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      // socket.emit(\"NewClient\");\n      // video.srcObject = stream;\n      // video.play();\n      //creating a peer:\n      const peer = new Peer(\"ABCD\");\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }, stream => {\n        const call = peer.call(\"ABCD\", stream);\n        call.on(\"stream\", remoteStream => {\n          // Show stream in some <video> element.\n          video.srcObject = stream;\n          video.play();\n        });\n      }, err => {\n        console.error(\"Failed to get local stream\", err);\n      });\n    });\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Hello\")));\n};\n\nexport default Videochatroom;","map":{"version":3,"sources":["/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/videosegmentation/Videochatroom.js"],"names":["React","Fragment","useState","Peer","Videochatroom","conn","peer","connect","destId","send","on","data","console","log","useEffect","video","document","querySelector","navigator","mediaDevices","getUserMedia","audio","then","stream","call","remoteStream","srcObject","play","err","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AACA,MAAMC,aAAa,GAAG,MAAM;AAC1B,MAAIC,IAAI,GAAGC,IAAI,CAACC,OAAL,CAAaC,MAAb,CAAX;AACAH,EAAAA,IAAI,CAACI,IAAL,CAAU,OAAV;AACAJ,EAAAA,IAAI,CAACK,EAAL,CAAQ,MAAR,EAAgB,UAASC,IAAT,EAAe;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,GAFD;AAGAG,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAC,IAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgB;AAAEL,MAAAA,KAAK,EAAE,IAAT;AAAeM,MAAAA,KAAK,EAAE;AAAtB,KADhB,EAEGC,IAFH,CAEQC,MAAM,IAAI;AACd;AACA;AACA;AAEA;AACA,YAAMjB,IAAI,GAAG,IAAIH,IAAJ,CAAS,MAAT,CAAb;AACAe,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CACE;AAAEL,QAAAA,KAAK,EAAE,IAAT;AAAeM,QAAAA,KAAK,EAAE;AAAtB,OADF,EAEEE,MAAM,IAAI;AACR,cAAMC,IAAI,GAAGlB,IAAI,CAACkB,IAAL,CAAU,MAAV,EAAkBD,MAAlB,CAAb;AACAC,QAAAA,IAAI,CAACd,EAAL,CAAQ,QAAR,EAAkBe,YAAY,IAAI;AAChC;AACAV,UAAAA,KAAK,CAACW,SAAN,GAAkBH,MAAlB;AACAR,UAAAA,KAAK,CAACY,IAAN;AACD,SAJD;AAKD,OATH,EAUEC,GAAG,IAAI;AACLhB,QAAAA,OAAO,CAACiB,KAAR,CAAc,4BAAd,EAA4CD,GAA5C;AACD,OAZH;AAcD,KAvBH;AAwBD,GA1BQ,EA0BN,EA1BM,CAAT;AA2BA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF,CADF;AAOD,CAxCD;;AA0CA,eAAexB,aAAf","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport Peer from \"peerjs\";\nconst Videochatroom = () => {\n  var conn = peer.connect(destId);\n  conn.send(\"hello\");\n  conn.on(\"data\", function(data) {\n    console.log(data);\n  });\n  useEffect(() => {\n    const video = document.querySelector(\"video\");\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then(stream => {\n        // socket.emit(\"NewClient\");\n        // video.srcObject = stream;\n        // video.play();\n\n        //creating a peer:\n        const peer = new Peer(\"ABCD\");\n        navigator.mediaDevices.getUserMedia(\n          { video: true, audio: true },\n          stream => {\n            const call = peer.call(\"ABCD\", stream);\n            call.on(\"stream\", remoteStream => {\n              // Show stream in some <video> element.\n              video.srcObject = stream;\n              video.play();\n            });\n          },\n          err => {\n            console.error(\"Failed to get local stream\", err);\n          }\n        );\n      });\n  }, []);\n  return (\n    <Fragment>\n      <div>\n        <p>Hello</p>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Videochatroom;\n"]},"metadata":{},"sourceType":"module"}