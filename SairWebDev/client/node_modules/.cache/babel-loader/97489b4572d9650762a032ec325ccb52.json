{"ast":null,"code":"import _slicedToArray from \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/VideoChatting/Videochat.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Peer from \"peerjs\";\nimport socketIOClient from \"socket.io-client\";\nlet client = {};\n\nconst Videochat = () => {\n  const _useState = useState({\n    response: \"false\",\n    endpoint: \"http://127.0.0.1:5000\",\n    stream: null\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        socketinfo = _useState2[0],\n        setsocketinfo = _useState2[1];\n\n  const socket = socketIOClient(\"http://127.0.0.1:5000\");\n  var str = null;\n  useEffect(() => {\n    console.log(\"Trying to establish connection\");\n    socket.emit(\"CheckConnection\", \"Message\");\n    console.log(\"Connection Established\");\n    const video = document.querySelector(\"video\");\n    const clientId = window.location.hostname.toString(); //Taking media services\n\n    var strm = null;\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      socket.emit(\"NewClient\", clientId);\n      video.srcObject = stream;\n      video.play();\n      strm = stream;\n    });\n    socket.on(\"CreatePeer\", data => {\n      console.log(data);\n    }); // socket.on(\"CreatePeer\", data => {\n    //   console.log(data);\n    //   if (data === 1) {\n    //     var vid = document.createElement(\"video\");\n    //     vid.id = \"video2\";\n    //     document.querySelector(\"#peerVid\").appendChild(vid);\n    //     let peer = new Peer({\n    //       initiator: true,\n    //       stream: strm,\n    //       trickle: false\n    //     });\n    //     peer.on(\"stream\", stream => {\n    //       vid.srcObject = stream;\n    //       vid.play();\n    //     });\n    //   }\n    // });\n  });\n\n  function initPeer() {}\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Video\", React.createElement(\"video\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    id: \"peerVid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Video2\"));\n};\n\nexport default Videochat;","map":{"version":3,"sources":["/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/VideoChatting/Videochat.js"],"names":["React","Fragment","useState","useEffect","Peer","socketIOClient","client","Videochat","response","endpoint","stream","socketinfo","setsocketinfo","socket","str","console","log","emit","video","document","querySelector","clientId","window","location","hostname","toString","strm","navigator","mediaDevices","getUserMedia","audio","then","srcObject","play","on","data","initPeer"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,IAAIC,MAAM,GAAG,EAAb;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACcL,QAAQ,CAAC;AAC3CM,IAAAA,QAAQ,EAAE,OADiC;AAE3CC,IAAAA,QAAQ,EAAE,uBAFiC;AAG3CC,IAAAA,MAAM,EAAE;AAHmC,GAAD,CADtB;AAAA;AAAA,QACfC,UADe;AAAA,QACHC,aADG;;AAMtB,QAAMC,MAAM,GAAGR,cAAc,CAAC,uBAAD,CAA7B;AACA,MAAIS,GAAG,GAAG,IAAV;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAH,IAAAA,MAAM,CAACI,IAAP,CAAY,iBAAZ,EAA+B,SAA/B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,UAAME,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACA,UAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,QAAzB,EAAjB,CALc,CAMd;;AACA,QAAIC,IAAI,GAAG,IAAX;AACAC,IAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgB;AAAEX,MAAAA,KAAK,EAAE,IAAT;AAAeY,MAAAA,KAAK,EAAE;AAAtB,KADhB,EAEGC,IAFH,CAEQrB,MAAM,IAAI;AACdG,MAAAA,MAAM,CAACI,IAAP,CAAY,WAAZ,EAAyBI,QAAzB;AACAH,MAAAA,KAAK,CAACc,SAAN,GAAkBtB,MAAlB;AACAQ,MAAAA,KAAK,CAACe,IAAN;AACAP,MAAAA,IAAI,GAAGhB,MAAP;AACD,KAPH;AAQAG,IAAAA,MAAM,CAACqB,EAAP,CAAU,YAAV,EAAwBC,IAAI,IAAI;AAC9BpB,MAAAA,OAAO,CAACC,GAAR,CAAYmB,IAAZ;AACD,KAFD,EAhBc,CAmBd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GApCQ,CAAT;;AAqCA,WAASC,QAAT,GAAoB,CAAE;;AACtB,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE;AAAK,IAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,CADF;AASD,CAvDD;;AAyDA,eAAe7B,SAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport Peer from \"peerjs\";\nimport socketIOClient from \"socket.io-client\";\n\nlet client = {};\n\nconst Videochat = () => {\n  const [socketinfo, setsocketinfo] = useState({\n    response: \"false\",\n    endpoint: \"http://127.0.0.1:5000\",\n    stream: null\n  });\n  const socket = socketIOClient(\"http://127.0.0.1:5000\");\n  var str = null;\n  useEffect(() => {\n    console.log(\"Trying to establish connection\");\n    socket.emit(\"CheckConnection\", \"Message\");\n    console.log(\"Connection Established\");\n    const video = document.querySelector(\"video\");\n    const clientId = window.location.hostname.toString();\n    //Taking media services\n    var strm = null;\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then(stream => {\n        socket.emit(\"NewClient\", clientId);\n        video.srcObject = stream;\n        video.play();\n        strm = stream;\n      });\n    socket.on(\"CreatePeer\", data => {\n      console.log(data);\n    });\n    // socket.on(\"CreatePeer\", data => {\n    //   console.log(data);\n    //   if (data === 1) {\n    //     var vid = document.createElement(\"video\");\n    //     vid.id = \"video2\";\n    //     document.querySelector(\"#peerVid\").appendChild(vid);\n    //     let peer = new Peer({\n    //       initiator: true,\n    //       stream: strm,\n    //       trickle: false\n    //     });\n    //     peer.on(\"stream\", stream => {\n    //       vid.srcObject = stream;\n    //       vid.play();\n    //     });\n    //   }\n    // });\n  });\n  function initPeer() {}\n  return (\n    <Fragment>\n      <div>\n        Video\n        <video />\n      </div>\n      <div id=\"peerVid\">Video2</div>\n    </Fragment>\n  );\n};\n\nexport default Videochat;\n"]},"metadata":{},"sourceType":"module"}