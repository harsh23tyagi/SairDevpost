{"ast":null,"code":"import _slicedToArray from \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/VideoChatting/Videochat.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Peer from \"peerjs\";\nimport socketIOClient from \"socket.io-client\";\nlet client = {};\n\nconst Videochat = () => {\n  const _useState = useState({\n    // response: \"false\",\n    // endpoint: \"http://127.0.0.1:5000\",\n    stream1: null,\n    stream2: null\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        socketinfo = _useState2[0],\n        setsocketinfo = _useState2[1];\n\n  const socket = socketIOClient(\"http://127.0.0.1:5000\");\n  var str = null;\n  useEffect(() => {\n    console.log(\"Trying to establish connection\");\n    socket.emit(\"CheckConnection\", \"Message\");\n    console.log(\"Connection Established\");\n    const video = document.querySelector(\"video\");\n    const clientId = window.location.hostname.toString(); //Taking media services\n\n    var strm = null;\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      video.srcObject = stream;\n      video.play();\n      socket.emit(\"NewClient\", window.location.host);\n      socket.on(\"CreatePeer\", data => {\n        if (data === 0) {\n          console.log(\"Setting up stream object1\");\n          setsocketinfo({\n            stream1: stream\n          });\n        }\n\n        if (data === 1) {\n          console.log(\"Setting up stream object2\");\n          setsocketinfo({\n            stream2: stream\n          });\n        }\n      }); // setsocketinfo({ stream: stream });\n      // socket.on(\"CreatePeer\", data => {\n      //   console.log(data);\n      //   if (data === 1) {\n      //     console.log(\"Setting Up\");\n      //     // setsocketinfo({ stream: stream });\n      //     let peer = new Peer({\n      //       initiator: true,\n      //       stream: stream,\n      //       trickle: false\n      //     });\n      //     peer.on(\"stream\", stream => {\n      //       const video2 = document.getElementById(\"videoP\");\n      //       video2.srcObject = stream;\n      //       video2.play();\n      //       console.log(\"DOne\");\n      //     });\n      //   }\n      // });\n    }); // socket.on(\"CreatePeer\", data => {\n    //   console.log(data);\n    //   if (data === 1) {\n    //     var vid = document.createElement(\"video\");\n    //     vid.id = \"video2\";\n    //     document.querySelector(\"#peerVid\").appendChild(vid);\n    //     let peer = new Peer({\n    //       initiator: true,\n    //       stream: strm,\n    //       trickle: false\n    //     });\n    //     peer.on(\"stream\", stream => {\n    //       vid.srcObject = stream;\n    //       vid.play();\n    //     });\n    //   }\n    // });\n  });\n\n  function initPeer() {}\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Video\", React.createElement(\"video\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    id: \"peerVid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Video2\", React.createElement(\"video\", {\n    id: \"videoP\",\n    srcobject: socketinfo.stream2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })));\n};\n\nexport default Videochat;","map":{"version":3,"sources":["/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/VideoChatting/Videochat.js"],"names":["React","Fragment","useState","useEffect","Peer","socketIOClient","client","Videochat","stream1","stream2","socketinfo","setsocketinfo","socket","str","console","log","emit","video","document","querySelector","clientId","window","location","hostname","toString","strm","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","play","host","on","data","initPeer"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,IAAIC,MAAM,GAAG,EAAb;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACcL,QAAQ,CAAC;AAC3C;AACA;AACAM,IAAAA,OAAO,EAAE,IAHkC;AAI3CC,IAAAA,OAAO,EAAE;AAJkC,GAAD,CADtB;AAAA;AAAA,QACfC,UADe;AAAA,QACHC,aADG;;AAOtB,QAAMC,MAAM,GAAGP,cAAc,CAAC,uBAAD,CAA7B;AACA,MAAIQ,GAAG,GAAG,IAAV;AACAV,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAH,IAAAA,MAAM,CAACI,IAAP,CAAY,iBAAZ,EAA+B,SAA/B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,UAAME,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACA,UAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,QAAzB,EAAjB,CALc,CAMd;;AACA,QAAIC,IAAI,GAAG,IAAX;AACAC,IAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgB;AAAEX,MAAAA,KAAK,EAAE,IAAT;AAAeY,MAAAA,KAAK,EAAE;AAAtB,KADhB,EAEGC,IAFH,CAEQC,MAAM,IAAI;AACdd,MAAAA,KAAK,CAACe,SAAN,GAAkBD,MAAlB;AACAd,MAAAA,KAAK,CAACgB,IAAN;AACArB,MAAAA,MAAM,CAACI,IAAP,CAAY,WAAZ,EAAyBK,MAAM,CAACC,QAAP,CAAgBY,IAAzC;AACAtB,MAAAA,MAAM,CAACuB,EAAP,CAAU,YAAV,EAAwBC,IAAI,IAAI;AAC9B,YAAIA,IAAI,KAAK,CAAb,EAAgB;AACdtB,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAJ,UAAAA,aAAa,CAAC;AAAEH,YAAAA,OAAO,EAAEuB;AAAX,WAAD,CAAb;AACD;;AACD,YAAIK,IAAI,KAAK,CAAb,EAAgB;AACdtB,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAJ,UAAAA,aAAa,CAAC;AAAEF,YAAAA,OAAO,EAAEsB;AAAX,WAAD,CAAb;AACD;AACF,OATD,EAJc,CAed;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KApCH,EARc,CA8Cd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GA/DQ,CAAT;;AAgEA,WAASM,QAAT,GAAoB,CAAE;;AACtB,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE;AAAK,IAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEE;AAAO,IAAA,EAAE,EAAC,QAAV;AAAmB,IAAA,SAAS,EAAE3B,UAAU,CAACD,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CALF,CADF;AAYD,CAtFD;;AAwFA,eAAeF,SAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport Peer from \"peerjs\";\nimport socketIOClient from \"socket.io-client\";\n\nlet client = {};\n\nconst Videochat = () => {\n  const [socketinfo, setsocketinfo] = useState({\n    // response: \"false\",\n    // endpoint: \"http://127.0.0.1:5000\",\n    stream1: null,\n    stream2: null\n  });\n  const socket = socketIOClient(\"http://127.0.0.1:5000\");\n  var str = null;\n  useEffect(() => {\n    console.log(\"Trying to establish connection\");\n    socket.emit(\"CheckConnection\", \"Message\");\n    console.log(\"Connection Established\");\n    const video = document.querySelector(\"video\");\n    const clientId = window.location.hostname.toString();\n    //Taking media services\n    var strm = null;\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then(stream => {\n        video.srcObject = stream;\n        video.play();\n        socket.emit(\"NewClient\", window.location.host);\n        socket.on(\"CreatePeer\", data => {\n          if (data === 0) {\n            console.log(\"Setting up stream object1\");\n            setsocketinfo({ stream1: stream });\n          }\n          if (data === 1) {\n            console.log(\"Setting up stream object2\");\n            setsocketinfo({ stream2: stream });\n          }\n        });\n\n        // setsocketinfo({ stream: stream });\n        // socket.on(\"CreatePeer\", data => {\n        //   console.log(data);\n        //   if (data === 1) {\n        //     console.log(\"Setting Up\");\n        //     // setsocketinfo({ stream: stream });\n        //     let peer = new Peer({\n        //       initiator: true,\n        //       stream: stream,\n        //       trickle: false\n        //     });\n        //     peer.on(\"stream\", stream => {\n        //       const video2 = document.getElementById(\"videoP\");\n        //       video2.srcObject = stream;\n        //       video2.play();\n        //       console.log(\"DOne\");\n        //     });\n        //   }\n        // });\n      });\n\n    // socket.on(\"CreatePeer\", data => {\n    //   console.log(data);\n    //   if (data === 1) {\n    //     var vid = document.createElement(\"video\");\n    //     vid.id = \"video2\";\n    //     document.querySelector(\"#peerVid\").appendChild(vid);\n    //     let peer = new Peer({\n    //       initiator: true,\n    //       stream: strm,\n    //       trickle: false\n    //     });\n    //     peer.on(\"stream\", stream => {\n    //       vid.srcObject = stream;\n    //       vid.play();\n    //     });\n    //   }\n    // });\n  });\n  function initPeer() {}\n  return (\n    <Fragment>\n      <div>\n        Video\n        <video />\n      </div>\n      <div id=\"peerVid\">\n        Video2\n        <video id=\"videoP\" srcobject={socketinfo.stream2} />\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Videochat;\n"]},"metadata":{},"sourceType":"module"}