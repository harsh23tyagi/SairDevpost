{"ast":null,"code":"import _slicedToArray from \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/VideoChatting/VideochatWSeg.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Peer from \"simple-peer\";\nimport socketIOClient from \"socket.io-client\";\nimport \"./videochatstyles.css\";\nimport * as bodyPix from \"@tensorflow-models/body-pix\";\nimport \"../../Self.css\";\nimport * as partColorScales from \"./color_scheme\"; // New Imports for videoSegmentation\n\nimport dat from \"dat.gui\";\nimport Stats from \"stats.js\";\nimport { computeOutShape } from \"@tensorflow/tfjs-core/dist/ops/concat_util\"; //End of imports\n// ------Begin coding video demo------\n\nconst stats = new Stats();\nconst state = {\n  video: null,\n  strem: null,\n  net: null,\n  videoConstraints: {},\n  changingCamera: false,\n  changingArchitecture: false\n}; // var flag = false;\n// const startRecording = async e => {\n//   e.preventDefault();\n//   console.log(\"Starting to record\");\n//   flag = true;\n//   const btn = document.getElementById(\"stopRec\");\n//   btn.textContent = \"Stop Recording..\";\n//   const canv = document.getElementById(\"output\");\n//   var stream = canv.captureStream(25);\n//   let mediaRecorder = new MediaRecorder(stream);\n//   mediaRecorder.start();\n//   console.log(\"Started Recording\");\n//   let chunks = [];\n//   mediaRecorder.ondataavailable = function(ev) {\n//     chunks.push(ev.data);\n//     console.log(\"Pushing data\");\n//     console.log(ev.data);\n//   };\n//   const vidsav = document.getElementById(\"bijli\");\n//   setTimeout(function() {\n//     mediaRecorder.stop();\n//     let blob = new Blob(chunks, { type: \"video/mp4\" });\n//     console.log(\"Stopping\");\n//     console.log(blob);\n//     chunks = [];\n//     let videoURL = window.URL.createObjectURL(blob);\n//     vidsav.src = videoURL;\n//   }, 5000);\n//   //   console.log(\"Taking a break...\");\n//   //   await sleep(5000);\n//   //   mediaRecorder.stop();\n//   //   btn.addEventListener(\"click\", ev => {\n//   //     ev.preventDefault();\n//   //     if (flag) {\n//   //       console.log(\"Trying to Stop\");\n//   //       mediaRecorder.stop();\n//   //       flag = false;\n//   //     }\n//   //   });\n//   //   const vidsav = document.getElementById(\"bijli\");\n//   //   mediaRecorder.onStop = async e => {\n//   //     let blob = new Blob(chunks, { type: \"video/mp4\" });\n//   //     console.log(\"Stopping\");\n//   //     console.log(blob);\n//   //     chunks = [];\n//   //     let videoURL = window.URL.createObjectURL(blob);\n//   //     vidsav.src = videoURL;\n//   //   };\n// };\n//Checking the type of device: Mobile or not- if mobile then android or IoS\n\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\n\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\n\nfunction isMobile() {\n  return isAndroid() || isiOS();\n}\n\nasync function getVideoInputs() {\n  console.log(\"Checking Devices\");\n\n  if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n    console.log(\"enumerateDevices() not supported.\");\n    return [];\n  }\n\n  const devices = await navigator.mediaDevices.enumerateDevices();\n  const videoDevices = devices.filter(device => device.kind === \"videoinput\");\n  console.log(videoDevices);\n  return videoDevices;\n}\n\nfunction stopExistingVideoCapture() {\n  if (state.video && state.video.srcObject) {\n    state.video.srcObject.getTracks().forEach(track => {\n      track.stop();\n    });\n    state.video.srcObject = null;\n  }\n}\n\nasync function getDeviceIdForLabel(cameraLabel) {\n  // event.preventDefault(); //remove this line whenever you want to load the next page\n  const videoInputs = await getVideoInputs();\n  console.log(\"CamerLabel\" + cameraLabel);\n\n  for (let i = 0; i < videoInputs.length; i++) {\n    const videoInput = videoInputs[i];\n\n    if (videoInput.label === cameraLabel) {\n      console.log(\"Camera Found: \");\n      console.log(videoInput);\n      console.log(videoInput.label);\n      return videoInput.deviceId;\n    }\n  }\n\n  return null;\n}\n\nfunction getFacingMode(cameraLabel) {\n  if (!cameraLabel) {\n    return \"user\";\n  }\n\n  if (cameraLabel.toLowerCase().includes(\"back\")) {\n    return \"environment\";\n  } else {\n    return \"user\";\n  }\n}\n\nasync function getConstraints(cameraLabel) {\n  let deviceId;\n  let facingMode;\n\n  if (cameraLabel) {\n    deviceId = await getDeviceIdForLabel(cameraLabel); // on mobile, use the facing mode based on the camera.\n\n    facingMode = isMobile() ? getFacingMode(cameraLabel) : null;\n  }\n\n  return {\n    deviceId,\n    facingMode\n  };\n}\n\nasync function setupCamera(cameraLabel) {\n  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    throw new Error(\"Browser API navigator.mediaDevices.getUserMedia not available\");\n  } //   const videoElement = document.getElementById(\"video\");\n\n\n  const videoElement = document.getElementById(\"peervid\");\n  stopExistingVideoCapture();\n  const videoConstraints = await getConstraints(cameraLabel);\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: false,\n    video: videoConstraints\n  });\n  videoElement.srcObject = stream;\n  return new Promise(resolve => {\n    videoElement.onloadedmetadata = () => {\n      videoElement.width = videoElement.videoWidth;\n      videoElement.height = videoElement.videoHeight;\n      resolve(videoElement);\n    };\n  });\n}\n\nasync function loadVideo(cameraLabel) {\n  try {\n    state.video = await setupCamera(cameraLabel);\n  } catch (e) {\n    let info = document.getElementById(\"info\");\n    info.textContent = \"this browser does not support video capture,\" + \"or this device does not have a camera\";\n    info.style.display = \"block\";\n    throw e;\n  }\n\n  state.video.play();\n}\n\nconst guiState = {\n  estimate: \"segmentation\",\n  camera: null,\n  flipHorizontal: true,\n  input: {\n    mobileNetArchitecture: isMobile() ? \"0.50\" : \"0.75\",\n    outputStride: 16\n  },\n  segmentation: {\n    segmentationThreshold: 0.7,\n    effect: \"mask\",\n    maskBackground: true,\n    opacity: 1.0,\n    backgroundBlurAmount: 3,\n    maskBlurAmount: 20,\n    edgeBlurAmount: 3\n  },\n  partMap: {\n    colorScale: \"rainbow\",\n    segmentationThreshold: 0.5,\n    applyPixelation: false,\n    opacity: 0.9\n  },\n  showFps: !isMobile()\n};\n\nfunction toCameraOptions(cameras) {\n  const result = {\n    default: null\n  };\n  cameras.forEach(camera => {\n    result[camera.label] = camera.label;\n  });\n  return result;\n} // Setting up GUI\n\n\nfunction setupGui(cameras) {\n  const gui = new dat.GUI({\n    width: 300\n  });\n  gui.add(guiState, \"camera\", toCameraOptions(cameras)).onChange(async function (cameraLabel) {\n    state.changingCamera = true;\n    await loadVideo(cameraLabel);\n    state.changingCamera = false;\n  });\n  gui.add(guiState, \"flipHorizontal\"); // Architecture: there are a few BodyPix models varying in size and\n  // accuracy. 1.00 is the largest, but will be the slowest. 0.25 is the\n  // fastest, but least accurate.\n\n  gui.add(guiState.input, \"mobileNetArchitecture\", [\"1.00\", \"0.75\", \"0.50\", \"0.25\"]).onChange(async function (architecture) {\n    state.changingArchitecture = true; // Important to purge variables and free\n    // up GPU memory\n\n    state.net.dispose(); // Load the PoseNet model weights for\n    // either the 0.50, 0.75, 1.00, or 1.01\n    // version\n\n    state.net = await bodyPix.load(+architecture);\n    state.changingArchitecture = false;\n  }); // Output stride:  Internally, this parameter affects the height and width\n  // of the layers in the neural network. The lower the value of the output\n  // stride the higher the accuracy but slower the speed, the higher the value\n  // the faster the speed but lower the accuracy.\n\n  gui.add(guiState.input, \"outputStride\", [8, 16, 32]);\n  const estimateController = gui.add(guiState, \"estimate\", [\"segmentation\", \"partmap\"]);\n  let segmentation = gui.addFolder(\"Segmentation\");\n  segmentation.add(guiState.segmentation, \"segmentationThreshold\", 0.0, 1.0);\n  const segmentationEffectController = segmentation.add(guiState.segmentation, \"effect\", [\"mask\", \"bokeh\"]);\n  segmentation.open();\n  let darknessLevel;\n  let bokehBlurAmount;\n  let edgeBlurAmount;\n  let maskBlurAmount;\n  let maskBackground;\n  segmentationEffectController.onChange(function (effectType) {\n    if (effectType === \"mask\") {\n      if (bokehBlurAmount) {\n        bokehBlurAmount.remove();\n      }\n\n      if (edgeBlurAmount) {\n        edgeBlurAmount.remove();\n      }\n\n      darknessLevel = segmentation.add(guiState.segmentation, \"opacity\", 0.0, 1.0);\n      maskBlurAmount = segmentation.add(guiState.segmentation, \"maskBlurAmount\").min(0).max(20).step(1);\n      maskBackground = segmentation.add(guiState.segmentation, \"maskBackground\");\n    } else if (effectType === \"bokeh\") {\n      if (darknessLevel) {\n        darknessLevel.remove();\n      }\n\n      if (maskBlurAmount) {\n        maskBlurAmount.remove();\n      }\n\n      if (maskBackground) {\n        maskBackground.remove();\n      }\n\n      bokehBlurAmount = segmentation.add(guiState.segmentation, \"backgroundBlurAmount\").min(1).max(20).step(1);\n      edgeBlurAmount = segmentation.add(guiState.segmentation, \"edgeBlurAmount\").min(0).max(20).step(1);\n    }\n  }); // manually set the effect so that the options are shown.\n\n  segmentationEffectController.setValue(guiState.segmentation.effect);\n  let partMap = gui.addFolder(\"Part Map\");\n  partMap.add(guiState.partMap, \"segmentationThreshold\", 0.0, 1.0);\n  partMap.add(guiState.partMap, \"applyPixelation\");\n  partMap.add(guiState.partMap, \"opacity\", 0.0, 1.0);\n  partMap.add(guiState.partMap, \"colorScale\", Object.keys(partColorScales)).onChange(colorScale => {\n    setShownPartColorScales(colorScale);\n  });\n  setShownPartColorScales(guiState.partMap.colorScale);\n  estimateController.onChange(function (estimationType) {\n    if (estimationType === \"segmentation\") {\n      segmentation.open();\n      partMap.close();\n      document.getElementById(\"colors\").style.display = \"none\";\n    } else {\n      segmentation.close();\n      partMap.open();\n      document.getElementById(\"colors\").style.display = \"inline-block\";\n    }\n  });\n  gui.add(guiState, \"showFps\").onChange(showFps => {\n    if (showFps) {\n      document.body.appendChild(stats.dom);\n    } else {\n      document.body.removeChild(stats.dom);\n    }\n  });\n}\n\nfunction setShownPartColorScales(colorScale) {\n  const colors = document.getElementById(\"colors\");\n  colors.innerHTML = \"\";\n  const partColors = partColorScales[colorScale];\n  const partNames = bodyPix.partChannels;\n\n  for (let i = 0; i < partColors.length; i++) {\n    const partColor = partColors[i];\n    const child = document.createElement(\"li\");\n    child.innerHTML = \"\\n        <div class='color' style='background-color:rgb(\".concat(partColor[0], \",\").concat(partColor[1], \",\").concat(partColor[2], \")' ></div>\\n        \").concat(partNames[i]);\n    colors.appendChild(child);\n  }\n} //--GUI Setup Ends--\n// ---Seting up FPS--\n\n/**\n * Sets up a frames per second panel on the top-left of the window\n */\n\n\nfunction setupFPS() {\n  stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n\n  if (guiState.showFps) {\n    document.body.appendChild(stats.dom);\n  }\n} //Body Segmentation in real time\n\n\nfunction segmentBodyInRealTime() {\n  const canvas = document.getElementById(\"output\"); // since images are being fed from a webcam\n\n  async function bodySegmentationFrame() {\n    // if changing the model or the camera, wait a second for it to complete\n    // then try again.\n    if (state.changingArchitecture || state.changingCamera) {\n      setTimeout(bodySegmentationFrame, 1000);\n      return;\n    } // Begin monitoring code for frames per second\n\n\n    stats.begin(); // Scale an image down to a certain factor. Too large of an image will\n    // slow down the GPU\n\n    const outputStride = +guiState.input.outputStride;\n    const flipHorizontally = guiState.flipHorizontal;\n\n    switch (guiState.estimate) {\n      case \"segmentation\":\n        const personSegmentation = await state.net.estimatePersonSegmentation(state.video, outputStride, guiState.segmentation.segmentationThreshold);\n\n        switch (guiState.segmentation.effect) {\n          case \"mask\":\n            const mask = bodyPix.toMaskImageData(personSegmentation, guiState.segmentation.maskBackground);\n            bodyPix.drawMask(canvas, state.video, mask, guiState.segmentation.opacity, guiState.segmentation.maskBlurAmount, flipHorizontally);\n            break;\n\n          case \"bokeh\":\n            bodyPix.drawBokehEffect(canvas, state.video, personSegmentation, +guiState.segmentation.backgroundBlurAmount, guiState.segmentation.edgeBlurAmount, flipHorizontally);\n            break;\n        }\n\n        break;\n\n      case \"partmap\":\n        const partSegmentation = await state.net.estimatePartSegmentation(state.video, outputStride, guiState.partMap.segmentationThreshold);\n        const coloredPartImageData = bodyPix.toColoredPartImageData(partSegmentation, partColorScales[guiState.partMap.colorScale]);\n        const maskBlurAmount = 0;\n\n        if (guiState.partMap.applyPixelation) {\n          const pixelCellWidth = 10.0;\n          bodyPix.drawPixelatedMask(canvas, state.video, //changed here\n          coloredPartImageData, guiState.partMap.opacity, maskBlurAmount, flipHorizontally, pixelCellWidth);\n        } else {\n          bodyPix.drawMask(canvas, state.video, //changed here\n          coloredPartImageData, guiState.opacity, maskBlurAmount, flipHorizontally);\n        }\n\n        break;\n\n      default:\n        break;\n    } // End monitoring code for frames per second\n\n\n    stats.end();\n    requestAnimationFrame(bodySegmentationFrame);\n  }\n\n  bodySegmentationFrame();\n} //=====================================================P2P=======================================\n\n\nconst demoKickOff = async e => {\n  //   e.preventDefault();\n  state.net = await bodyPix.load(+guiState.input.mobileNetArchitecture); // document.getElementById(\"loading\").style.display = \"none\";\n\n  document.getElementById(\"main\").style.display = \"inline-block\";\n  await loadVideo();\n  let cameras = await getVideoInputs();\n  setupFPS();\n  setupGui(cameras);\n  segmentBodyInRealTime();\n};\n\nlet client = {};\nvar peer;\n\nconst Videochat = () => {\n  const _useState = useState({\n    clientID: -1\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        clientInfo = _useState2[0],\n        setClientInfo = _useState2[1];\n\n  var str = null;\n  var clientID;\n  const socket = socketIOClient(\"http://localhost:5000\");\n  useEffect(() => {\n    console.log(\"Enrered\");\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      console.log(\"ACCESSING\");\n      document.getElementById(\"getInfo\").addEventListener(\"click\", () => {\n        document.querySelector(\"#yourID\").value = \"\";\n        var id = Math.floor(Math.random() * 999999); // console.log(id);\n\n        document.getElementById(\"clientID\").textContent = \"ClientID: \" + id;\n        peer = new Peer({\n          initiator: window.location.hash === \"#init\",\n          trickle: false,\n          stream: stream\n        });\n        peer.on(\"error\", function (err) {\n          console.log(\"error\", err);\n        });\n        peer.on(\"signal\", function (data) {\n          console.log(\"SIGNAL\", JSON.stringify(data));\n          document.querySelector(\"#yourID\").value = JSON.stringify(data);\n        });\n        peer.on(\"data\", data => {\n          console.log(\"HEL\" + data);\n          document.getElementById(\"reading\").value = data;\n        });\n        peer.on(\"stream\", stream => {\n          var vid = document.getElementById(\"peervid\");\n          vid.srcObject = stream; // vid.play();\n\n          demoKickOff();\n        });\n      });\n      document.getElementById(\"createConnection\").addEventListener(\"click\", () => {\n        var otherID = JSON.parse(document.getElementById(\"connectingID\").value);\n        console.log(peer); // console.log\n\n        peer.signal(otherID);\n      });\n    });\n  });\n\n  const onsubmit = async e => {\n    e.preventDefault();\n    document.querySelector(\"#yourID\").value = \"\";\n    var id = Math.floor(Math.random() * 999999); // console.log(id);\n\n    document.getElementById(\"clientID\").textContent = \"ClientID: \" + id; // var text = document.getElementById(\"connectingID\").textContent;\n\n    peer = new Peer({\n      initiator: window.location.hash === \"#init\",\n      trickle: false //   stream: stream\n\n    });\n    console.log(peer);\n    peer.on(\"error\", function (err) {\n      console.log(\"error\", err);\n    });\n    peer.on(\"signal\", function (data) {\n      console.log(\"SIGNAL\", JSON.stringify(data));\n      document.querySelector(\"#yourID\").value = JSON.stringify(data);\n    });\n    peer.on(\"data\", data => {\n      console.log(\"HEL\" + data);\n      document.getElementById(\"reading\").value = data;\n    });\n    peer.on(\"stream\", stream => {\n      var vid = document.getElementById(\"peervid\");\n      vid.srcObject = stream;\n      vid.onplay();\n    });\n  };\n\n  const startChat = async e => {\n    e.preventDefault();\n    var otherID = JSON.parse(document.getElementById(\"connectingID\").value);\n    console.log(peer); // console.log\n\n    peer.signal(otherID);\n  };\n\n  const sendTextMessage = async e => {\n    e.preventDefault();\n    var message = document.getElementById(\"message\").value;\n    peer.send(message);\n  }; //   const startVideoChat = async e => {\n  //     e.preventDefault();\n  //     navigator.mediaDevices\n  //       .getUserMedia({ video: true, audio: true })\n  //       .then(stream => {\n  //         document.querySelector(\"#yourID\").value = \"\";\n  //         var id = Math.floor(Math.random() * 999999);\n  //         // console.log(id);\n  //         document.getElementById(\"clientID\").textContent = \"ClientID: \" + id;\n  //         // var text = document.getElementById(\"connectingID\").textContent;\n  //         // var peer = new Peer({\n  //         //   initiator: window.location.hash === \"#init\",\n  //         //   trickle: false,\n  //         //   stream: stream\n  //         // });\n  //       });\n  //     peer.on(\"stream\", stream => {\n  //       var vid = document.getElementById(\"peervid\");\n  //       vid.srcObj = stream;\n  //       vid.play();\n  //     });\n  //   };\n\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 677\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 679\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 680\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    // type=\"submit\"\n    id: \"getInfo\",\n    className: \"btn btn-primary\",\n    value: \"Get Info\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 682\n    },\n    __self: this\n  })), React.createElement(\"form\", {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 692\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter the ID to connect with your friend\",\n    name: \"name\",\n    id: \"connectingID\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 701\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    id: \"clientID\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 702\n    },\n    __self: this\n  }, \"Your ID: \")), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    id: \"IDPeer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 705\n    },\n    __self: this\n  }, \"Your Token: \"), React.createElement(\"textarea\", {\n    class: \"form-control\",\n    rows: \"5\",\n    id: \"yourID\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 706\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    className: \"btn btn-primary\",\n    value: \"Create Connection\",\n    id: \"createConnection\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 709\n    },\n    __self: this\n  })), React.createElement(\"form\", {\n    className: \"form\",\n    onSubmit: e => sendTextMessage(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 717\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 718\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    id: \"messageLabel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 719\n    },\n    __self: this\n  }, \"Write Your Message: \"), React.createElement(\"textarea\", {\n    class: \"form-control\",\n    rows: \"5\",\n    id: \"message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 720\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    value: \"Send Text Message\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 722\n    },\n    __self: this\n  })), React.createElement(\"form\", {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 729\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    value: \"Start Video Chat\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 730\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    id: \"msgbox\",\n    class: \"message-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 744\n    },\n    __self: this\n  }, React.createElement(\"textarea\", {\n    class: \"form-control\",\n    rows: \"5\",\n    id: \"reading\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 745\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    id: \"block_container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 747\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"video-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 748\n    },\n    __self: this\n  }, React.createElement(\"video\", {\n    id: \"peervid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 749\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"video-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 751\n    },\n    __self: this\n  }, React.createElement(\"video\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 752\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 756\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"form\",\n    onSubmit: e => demoKickOff(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 757\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    value: \"Get Device Label\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 758\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 766\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    value: \"Start Recording\",\n    id: \"startRec\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 767\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    value: \"Stop Recording\",\n    id: \"stopRec\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 775\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    id: \"stats\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 784\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"info\",\n    className: \"info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 785\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"main\",\n    className: \"info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 787\n    },\n    __self: this\n  }, React.createElement(\"video\", {\n    id: \"video\",\n    className: \"videoClass\",\n    playsInline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 788\n    },\n    __self: this\n  }), React.createElement(\"canvas\", {\n    id: \"output\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 789\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 791\n    },\n    __self: this\n  }, React.createElement(\"video\", {\n    id: \"bijli\",\n    controls: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 792\n    },\n    __self: this\n  }), React.createElement(\"ul\", {\n    id: \"colors\",\n    className: \"info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 793\n    },\n    __self: this\n  })));\n};\n\nexport default Videochat;","map":{"version":3,"sources":["/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/VideoChatting/VideochatWSeg.js"],"names":["React","Fragment","useState","useEffect","Peer","socketIOClient","bodyPix","partColorScales","dat","Stats","computeOutShape","stats","state","video","strem","net","videoConstraints","changingCamera","changingArchitecture","isAndroid","test","navigator","userAgent","isiOS","isMobile","getVideoInputs","console","log","mediaDevices","enumerateDevices","devices","videoDevices","filter","device","kind","stopExistingVideoCapture","srcObject","getTracks","forEach","track","stop","getDeviceIdForLabel","cameraLabel","videoInputs","i","length","videoInput","label","deviceId","getFacingMode","toLowerCase","includes","getConstraints","facingMode","setupCamera","getUserMedia","Error","videoElement","document","getElementById","stream","audio","Promise","resolve","onloadedmetadata","width","videoWidth","height","videoHeight","loadVideo","e","info","textContent","style","display","play","guiState","estimate","camera","flipHorizontal","input","mobileNetArchitecture","outputStride","segmentation","segmentationThreshold","effect","maskBackground","opacity","backgroundBlurAmount","maskBlurAmount","edgeBlurAmount","partMap","colorScale","applyPixelation","showFps","toCameraOptions","cameras","result","default","setupGui","gui","GUI","add","onChange","architecture","dispose","load","estimateController","addFolder","segmentationEffectController","open","darknessLevel","bokehBlurAmount","effectType","remove","min","max","step","setValue","Object","keys","setShownPartColorScales","estimationType","close","body","appendChild","dom","removeChild","colors","innerHTML","partColors","partNames","partChannels","partColor","child","createElement","setupFPS","showPanel","segmentBodyInRealTime","canvas","bodySegmentationFrame","setTimeout","begin","flipHorizontally","personSegmentation","estimatePersonSegmentation","mask","toMaskImageData","drawMask","drawBokehEffect","partSegmentation","estimatePartSegmentation","coloredPartImageData","toColoredPartImageData","pixelCellWidth","drawPixelatedMask","end","requestAnimationFrame","demoKickOff","client","peer","Videochat","clientID","clientInfo","setClientInfo","str","socket","then","addEventListener","querySelector","value","id","Math","floor","random","initiator","window","location","hash","trickle","on","err","data","JSON","stringify","vid","otherID","parse","signal","onsubmit","preventDefault","onplay","startChat","sendTextMessage","message","send"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport Peer from \"simple-peer\";\nimport socketIOClient from \"socket.io-client\";\nimport \"./videochatstyles.css\";\nimport * as bodyPix from \"@tensorflow-models/body-pix\";\nimport \"../../Self.css\";\nimport * as partColorScales from \"./color_scheme\";\n// New Imports for videoSegmentation\nimport dat from \"dat.gui\";\nimport Stats from \"stats.js\";\nimport { computeOutShape } from \"@tensorflow/tfjs-core/dist/ops/concat_util\";\n\n//End of imports\n\n// ------Begin coding video demo------\n\nconst stats = new Stats();\nconst state = {\n  video: null,\n  strem: null,\n  net: null,\n  videoConstraints: {},\n  changingCamera: false,\n  changingArchitecture: false\n};\n// var flag = false;\n// const startRecording = async e => {\n//   e.preventDefault();\n//   console.log(\"Starting to record\");\n//   flag = true;\n//   const btn = document.getElementById(\"stopRec\");\n//   btn.textContent = \"Stop Recording..\";\n//   const canv = document.getElementById(\"output\");\n//   var stream = canv.captureStream(25);\n//   let mediaRecorder = new MediaRecorder(stream);\n//   mediaRecorder.start();\n//   console.log(\"Started Recording\");\n//   let chunks = [];\n//   mediaRecorder.ondataavailable = function(ev) {\n//     chunks.push(ev.data);\n//     console.log(\"Pushing data\");\n//     console.log(ev.data);\n//   };\n//   const vidsav = document.getElementById(\"bijli\");\n\n//   setTimeout(function() {\n//     mediaRecorder.stop();\n//     let blob = new Blob(chunks, { type: \"video/mp4\" });\n//     console.log(\"Stopping\");\n//     console.log(blob);\n//     chunks = [];\n//     let videoURL = window.URL.createObjectURL(blob);\n//     vidsav.src = videoURL;\n//   }, 5000);\n//   //   console.log(\"Taking a break...\");\n//   //   await sleep(5000);\n//   //   mediaRecorder.stop();\n//   //   btn.addEventListener(\"click\", ev => {\n//   //     ev.preventDefault();\n\n//   //     if (flag) {\n//   //       console.log(\"Trying to Stop\");\n//   //       mediaRecorder.stop();\n//   //       flag = false;\n//   //     }\n//   //   });\n//   //   const vidsav = document.getElementById(\"bijli\");\n//   //   mediaRecorder.onStop = async e => {\n//   //     let blob = new Blob(chunks, { type: \"video/mp4\" });\n//   //     console.log(\"Stopping\");\n//   //     console.log(blob);\n//   //     chunks = [];\n//   //     let videoURL = window.URL.createObjectURL(blob);\n//   //     vidsav.src = videoURL;\n//   //   };\n// };\n\n//Checking the type of device: Mobile or not- if mobile then android or IoS\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\n\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\n\nfunction isMobile() {\n  return isAndroid() || isiOS();\n}\n\nasync function getVideoInputs() {\n  console.log(\"Checking Devices\");\n  if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n    console.log(\"enumerateDevices() not supported.\");\n    return [];\n  }\n\n  const devices = await navigator.mediaDevices.enumerateDevices();\n\n  const videoDevices = devices.filter(device => device.kind === \"videoinput\");\n  console.log(videoDevices);\n  return videoDevices;\n}\n\nfunction stopExistingVideoCapture() {\n  if (state.video && state.video.srcObject) {\n    state.video.srcObject.getTracks().forEach(track => {\n      track.stop();\n    });\n    state.video.srcObject = null;\n  }\n}\n\nasync function getDeviceIdForLabel(cameraLabel) {\n  // event.preventDefault(); //remove this line whenever you want to load the next page\n  const videoInputs = await getVideoInputs();\n  console.log(\"CamerLabel\" + cameraLabel);\n  for (let i = 0; i < videoInputs.length; i++) {\n    const videoInput = videoInputs[i];\n    if (videoInput.label === cameraLabel) {\n      console.log(\"Camera Found: \");\n      console.log(videoInput);\n      console.log(videoInput.label);\n      return videoInput.deviceId;\n    }\n  }\n\n  return null;\n}\n\nfunction getFacingMode(cameraLabel) {\n  if (!cameraLabel) {\n    return \"user\";\n  }\n  if (cameraLabel.toLowerCase().includes(\"back\")) {\n    return \"environment\";\n  } else {\n    return \"user\";\n  }\n}\n\nasync function getConstraints(cameraLabel) {\n  let deviceId;\n  let facingMode;\n\n  if (cameraLabel) {\n    deviceId = await getDeviceIdForLabel(cameraLabel);\n    // on mobile, use the facing mode based on the camera.\n    facingMode = isMobile() ? getFacingMode(cameraLabel) : null;\n  }\n  return { deviceId, facingMode };\n}\n\nasync function setupCamera(cameraLabel) {\n  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    throw new Error(\n      \"Browser API navigator.mediaDevices.getUserMedia not available\"\n    );\n  }\n\n  //   const videoElement = document.getElementById(\"video\");\n  const videoElement = document.getElementById(\"peervid\");\n\n  stopExistingVideoCapture();\n\n  const videoConstraints = await getConstraints(cameraLabel);\n\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: false,\n    video: videoConstraints\n  });\n  videoElement.srcObject = stream;\n\n  return new Promise(resolve => {\n    videoElement.onloadedmetadata = () => {\n      videoElement.width = videoElement.videoWidth;\n      videoElement.height = videoElement.videoHeight;\n      resolve(videoElement);\n    };\n  });\n}\n\nasync function loadVideo(cameraLabel) {\n  try {\n    state.video = await setupCamera(cameraLabel);\n  } catch (e) {\n    let info = document.getElementById(\"info\");\n    info.textContent =\n      \"this browser does not support video capture,\" +\n      \"or this device does not have a camera\";\n    info.style.display = \"block\";\n    throw e;\n  }\n\n  state.video.play();\n}\n\nconst guiState = {\n  estimate: \"segmentation\",\n  camera: null,\n  flipHorizontal: true,\n  input: {\n    mobileNetArchitecture: isMobile() ? \"0.50\" : \"0.75\",\n    outputStride: 16\n  },\n  segmentation: {\n    segmentationThreshold: 0.7,\n    effect: \"mask\",\n    maskBackground: true,\n    opacity: 1.0,\n    backgroundBlurAmount: 3,\n    maskBlurAmount: 20,\n    edgeBlurAmount: 3\n  },\n  partMap: {\n    colorScale: \"rainbow\",\n    segmentationThreshold: 0.5,\n    applyPixelation: false,\n    opacity: 0.9\n  },\n  showFps: !isMobile()\n};\n\nfunction toCameraOptions(cameras) {\n  const result = { default: null };\n\n  cameras.forEach(camera => {\n    result[camera.label] = camera.label;\n  });\n\n  return result;\n}\n\n// Setting up GUI\nfunction setupGui(cameras) {\n  const gui = new dat.GUI({ width: 300 });\n\n  gui\n    .add(guiState, \"camera\", toCameraOptions(cameras))\n    .onChange(async function(cameraLabel) {\n      state.changingCamera = true;\n\n      await loadVideo(cameraLabel);\n\n      state.changingCamera = false;\n    });\n\n  gui.add(guiState, \"flipHorizontal\");\n\n  // Architecture: there are a few BodyPix models varying in size and\n  // accuracy. 1.00 is the largest, but will be the slowest. 0.25 is the\n  // fastest, but least accurate.\n  gui\n    .add(guiState.input, \"mobileNetArchitecture\", [\n      \"1.00\",\n      \"0.75\",\n      \"0.50\",\n      \"0.25\"\n    ])\n    .onChange(async function(architecture) {\n      state.changingArchitecture = true;\n      // Important to purge variables and free\n      // up GPU memory\n      state.net.dispose();\n\n      // Load the PoseNet model weights for\n      // either the 0.50, 0.75, 1.00, or 1.01\n      // version\n      state.net = await bodyPix.load(+architecture);\n\n      state.changingArchitecture = false;\n    });\n\n  // Output stride:  Internally, this parameter affects the height and width\n  // of the layers in the neural network. The lower the value of the output\n  // stride the higher the accuracy but slower the speed, the higher the value\n  // the faster the speed but lower the accuracy.\n  gui.add(guiState.input, \"outputStride\", [8, 16, 32]);\n\n  const estimateController = gui.add(guiState, \"estimate\", [\n    \"segmentation\",\n    \"partmap\"\n  ]);\n\n  let segmentation = gui.addFolder(\"Segmentation\");\n  segmentation.add(guiState.segmentation, \"segmentationThreshold\", 0.0, 1.0);\n  const segmentationEffectController = segmentation.add(\n    guiState.segmentation,\n    \"effect\",\n    [\"mask\", \"bokeh\"]\n  );\n\n  segmentation.open();\n\n  let darknessLevel;\n  let bokehBlurAmount;\n  let edgeBlurAmount;\n  let maskBlurAmount;\n  let maskBackground;\n\n  segmentationEffectController.onChange(function(effectType) {\n    if (effectType === \"mask\") {\n      if (bokehBlurAmount) {\n        bokehBlurAmount.remove();\n      }\n      if (edgeBlurAmount) {\n        edgeBlurAmount.remove();\n      }\n      darknessLevel = segmentation.add(\n        guiState.segmentation,\n        \"opacity\",\n        0.0,\n        1.0\n      );\n      maskBlurAmount = segmentation\n        .add(guiState.segmentation, \"maskBlurAmount\")\n        .min(0)\n        .max(20)\n        .step(1);\n      maskBackground = segmentation.add(\n        guiState.segmentation,\n        \"maskBackground\"\n      );\n    } else if (effectType === \"bokeh\") {\n      if (darknessLevel) {\n        darknessLevel.remove();\n      }\n      if (maskBlurAmount) {\n        maskBlurAmount.remove();\n      }\n      if (maskBackground) {\n        maskBackground.remove();\n      }\n      bokehBlurAmount = segmentation\n        .add(guiState.segmentation, \"backgroundBlurAmount\")\n        .min(1)\n        .max(20)\n        .step(1);\n      edgeBlurAmount = segmentation\n        .add(guiState.segmentation, \"edgeBlurAmount\")\n        .min(0)\n        .max(20)\n        .step(1);\n    }\n  });\n\n  // manually set the effect so that the options are shown.\n  segmentationEffectController.setValue(guiState.segmentation.effect);\n\n  let partMap = gui.addFolder(\"Part Map\");\n  partMap.add(guiState.partMap, \"segmentationThreshold\", 0.0, 1.0);\n  partMap.add(guiState.partMap, \"applyPixelation\");\n  partMap.add(guiState.partMap, \"opacity\", 0.0, 1.0);\n  partMap\n    .add(guiState.partMap, \"colorScale\", Object.keys(partColorScales))\n    .onChange(colorScale => {\n      setShownPartColorScales(colorScale);\n    });\n  setShownPartColorScales(guiState.partMap.colorScale);\n\n  estimateController.onChange(function(estimationType) {\n    if (estimationType === \"segmentation\") {\n      segmentation.open();\n      partMap.close();\n      document.getElementById(\"colors\").style.display = \"none\";\n    } else {\n      segmentation.close();\n      partMap.open();\n      document.getElementById(\"colors\").style.display = \"inline-block\";\n    }\n  });\n\n  gui.add(guiState, \"showFps\").onChange(showFps => {\n    if (showFps) {\n      document.body.appendChild(stats.dom);\n    } else {\n      document.body.removeChild(stats.dom);\n    }\n  });\n}\n\nfunction setShownPartColorScales(colorScale) {\n  const colors = document.getElementById(\"colors\");\n  colors.innerHTML = \"\";\n\n  const partColors = partColorScales[colorScale];\n  const partNames = bodyPix.partChannels;\n\n  for (let i = 0; i < partColors.length; i++) {\n    const partColor = partColors[i];\n    const child = document.createElement(\"li\");\n\n    child.innerHTML = `\n        <div class='color' style='background-color:rgb(${partColor[0]},${\n      partColor[1]\n    },${partColor[2]})' ></div>\n        ${partNames[i]}`;\n\n    colors.appendChild(child);\n  }\n}\n//--GUI Setup Ends--\n\n// ---Seting up FPS--\n/**\n * Sets up a frames per second panel on the top-left of the window\n */\nfunction setupFPS() {\n  stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n  if (guiState.showFps) {\n    document.body.appendChild(stats.dom);\n  }\n}\n\n//Body Segmentation in real time\nfunction segmentBodyInRealTime() {\n  const canvas = document.getElementById(\"output\");\n  // since images are being fed from a webcam\n\n  async function bodySegmentationFrame() {\n    // if changing the model or the camera, wait a second for it to complete\n    // then try again.\n    if (state.changingArchitecture || state.changingCamera) {\n      setTimeout(bodySegmentationFrame, 1000);\n      return;\n    }\n\n    // Begin monitoring code for frames per second\n    stats.begin();\n\n    // Scale an image down to a certain factor. Too large of an image will\n    // slow down the GPU\n    const outputStride = +guiState.input.outputStride;\n\n    const flipHorizontally = guiState.flipHorizontal;\n\n    switch (guiState.estimate) {\n      case \"segmentation\":\n        const personSegmentation = await state.net.estimatePersonSegmentation(\n          state.video,\n          outputStride,\n          guiState.segmentation.segmentationThreshold\n        );\n\n        switch (guiState.segmentation.effect) {\n          case \"mask\":\n            const mask = bodyPix.toMaskImageData(\n              personSegmentation,\n              guiState.segmentation.maskBackground\n            );\n            bodyPix.drawMask(\n              canvas,\n              state.video,\n              mask,\n              guiState.segmentation.opacity,\n              guiState.segmentation.maskBlurAmount,\n              flipHorizontally\n            );\n\n            break;\n          case \"bokeh\":\n            bodyPix.drawBokehEffect(\n              canvas,\n              state.video,\n              personSegmentation,\n              +guiState.segmentation.backgroundBlurAmount,\n              guiState.segmentation.edgeBlurAmount,\n              flipHorizontally\n            );\n            break;\n        }\n        break;\n      case \"partmap\":\n        const partSegmentation = await state.net.estimatePartSegmentation(\n          state.video,\n          outputStride,\n          guiState.partMap.segmentationThreshold\n        );\n\n        const coloredPartImageData = bodyPix.toColoredPartImageData(\n          partSegmentation,\n          partColorScales[guiState.partMap.colorScale]\n        );\n\n        const maskBlurAmount = 0;\n        if (guiState.partMap.applyPixelation) {\n          const pixelCellWidth = 10.0;\n\n          bodyPix.drawPixelatedMask(\n            canvas,\n            state.video, //changed here\n            coloredPartImageData,\n            guiState.partMap.opacity,\n            maskBlurAmount,\n            flipHorizontally,\n            pixelCellWidth\n          );\n        } else {\n          bodyPix.drawMask(\n            canvas,\n            state.video, //changed here\n            coloredPartImageData,\n            guiState.opacity,\n            maskBlurAmount,\n            flipHorizontally\n          );\n        }\n\n        break;\n      default:\n        break;\n    }\n\n    // End monitoring code for frames per second\n    stats.end();\n\n    requestAnimationFrame(bodySegmentationFrame);\n  }\n\n  bodySegmentationFrame();\n}\n//=====================================================P2P=======================================\nconst demoKickOff = async e => {\n  //   e.preventDefault();\n  state.net = await bodyPix.load(+guiState.input.mobileNetArchitecture);\n\n  // document.getElementById(\"loading\").style.display = \"none\";\n  document.getElementById(\"main\").style.display = \"inline-block\";\n\n  await loadVideo();\n\n  let cameras = await getVideoInputs();\n\n  setupFPS();\n  setupGui(cameras);\n\n  segmentBodyInRealTime();\n};\nlet client = {};\nvar peer;\nconst Videochat = () => {\n  const [clientInfo, setClientInfo] = useState({\n    clientID: -1\n  });\n\n  var str = null;\n  var clientID;\n  const socket = socketIOClient(\"http://localhost:5000\");\n\n  useEffect(() => {\n    console.log(\"Enrered\");\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then(stream => {\n        console.log(\"ACCESSING\");\n        document.getElementById(\"getInfo\").addEventListener(\"click\", () => {\n          document.querySelector(\"#yourID\").value = \"\";\n          var id = Math.floor(Math.random() * 999999);\n          // console.log(id);\n          document.getElementById(\"clientID\").textContent = \"ClientID: \" + id;\n\n          peer = new Peer({\n            initiator: window.location.hash === \"#init\",\n            trickle: false,\n            stream: stream\n          });\n\n          peer.on(\"error\", function(err) {\n            console.log(\"error\", err);\n          });\n\n          peer.on(\"signal\", function(data) {\n            console.log(\"SIGNAL\", JSON.stringify(data));\n            document.querySelector(\"#yourID\").value = JSON.stringify(data);\n          });\n\n          peer.on(\"data\", data => {\n            console.log(\"HEL\" + data);\n            document.getElementById(\"reading\").value = data;\n          });\n\n          peer.on(\"stream\", stream => {\n            var vid = document.getElementById(\"peervid\");\n            vid.srcObject = stream;\n            // vid.play();\n            demoKickOff();\n          });\n        });\n\n        document\n          .getElementById(\"createConnection\")\n          .addEventListener(\"click\", () => {\n            var otherID = JSON.parse(\n              document.getElementById(\"connectingID\").value\n            );\n            console.log(peer);\n            // console.log\n            peer.signal(otherID);\n          });\n      });\n  });\n  const onsubmit = async e => {\n    e.preventDefault();\n    document.querySelector(\"#yourID\").value = \"\";\n    var id = Math.floor(Math.random() * 999999);\n    // console.log(id);\n    document.getElementById(\"clientID\").textContent = \"ClientID: \" + id;\n\n    // var text = document.getElementById(\"connectingID\").textContent;\n\n    peer = new Peer({\n      initiator: window.location.hash === \"#init\",\n      trickle: false\n      //   stream: stream\n    });\n\n    console.log(peer);\n    peer.on(\"error\", function(err) {\n      console.log(\"error\", err);\n    });\n\n    peer.on(\"signal\", function(data) {\n      console.log(\"SIGNAL\", JSON.stringify(data));\n      document.querySelector(\"#yourID\").value = JSON.stringify(data);\n    });\n\n    peer.on(\"data\", data => {\n      console.log(\"HEL\" + data);\n      document.getElementById(\"reading\").value = data;\n    });\n\n    peer.on(\"stream\", stream => {\n      var vid = document.getElementById(\"peervid\");\n      vid.srcObject = stream;\n      vid.onplay();\n    });\n  };\n\n  const startChat = async e => {\n    e.preventDefault();\n    var otherID = JSON.parse(document.getElementById(\"connectingID\").value);\n    console.log(peer);\n    // console.log\n    peer.signal(otherID);\n  };\n\n  const sendTextMessage = async e => {\n    e.preventDefault();\n    var message = document.getElementById(\"message\").value;\n    peer.send(message);\n  };\n  //   const startVideoChat = async e => {\n  //     e.preventDefault();\n  //     navigator.mediaDevices\n  //       .getUserMedia({ video: true, audio: true })\n  //       .then(stream => {\n  //         document.querySelector(\"#yourID\").value = \"\";\n  //         var id = Math.floor(Math.random() * 999999);\n  //         // console.log(id);\n  //         document.getElementById(\"clientID\").textContent = \"ClientID: \" + id;\n\n  //         // var text = document.getElementById(\"connectingID\").textContent;\n  //         // var peer = new Peer({\n  //         //   initiator: window.location.hash === \"#init\",\n  //         //   trickle: false,\n  //         //   stream: stream\n  //         // });\n  //       });\n  //     peer.on(\"stream\", stream => {\n  //       var vid = document.getElementById(\"peervid\");\n  //       vid.srcObj = stream;\n  //       vid.play();\n  //     });\n  //   };\n\n  return (\n    <Fragment>\n      {/* <button onClick={() => handleNewMessage()}>Emit new message</button> */}\n      <div>\n        <form className=\"form\">\n          {/* onSubmit={e => onsubmit(e)}> */}\n          <input\n            // type=\"submit\"\n            id=\"getInfo\"\n            className=\"btn btn-primary\"\n            value=\"Get Info\"\n            required\n          />\n        </form>\n        <form className=\"form\">\n          {/* onSubmit={e => startChat(e)} */}\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              placeholder=\"Enter the ID to connect with your friend\"\n              name=\"name\"\n              id=\"connectingID\"\n              required\n            />\n          </div>\n          <div className=\"form-group\">\n            <label id=\"clientID\">Your ID: </label>\n          </div>\n          <div className=\"form-group\">\n            <label id=\"IDPeer\">Your Token: </label>\n            <textarea class=\"form-control\" rows=\"5\" id=\"yourID\" />\n          </div>\n\n          <input\n            className=\"btn btn-primary\"\n            value=\"Create Connection\"\n            id=\"createConnection\"\n            required\n          />\n        </form>\n\n        <form className=\"form\" onSubmit={e => sendTextMessage(e)}>\n          <div className=\"form-group\">\n            <label id=\"messageLabel\">Write Your Message: </label>\n            <textarea class=\"form-control\" rows=\"5\" id=\"message\" />\n          </div>\n          <input\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            value=\"Send Text Message\"\n            required\n          />\n        </form>\n        <form className=\"form\">\n          <input\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            value=\"Start Video Chat\"\n            required\n          />\n        </form>\n      </div>\n\n      {/* <div className=\"container parent-box row \">\n        <div className=\"col-sm-4 d-flex justify-content-center video-box\" />{\" \"}\n        <div className=\"col-sm-4 d-flex justify-content-center video-box\" />\n      </div> */}\n\n      <div id=\"msgbox\" class=\"message-box\">\n        <textarea class=\"form-control\" rows=\"5\" id=\"reading\" />\n      </div>\n      <div id=\"block_container\">\n        <div className=\"video-box\">\n          <video id=\"peervid\" />\n        </div>\n        <div className=\"video-box\">\n          <video />\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <form className=\"form\" onSubmit={e => demoKickOff(e)}>\n          <input\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            value=\"Get Device Label\"\n            required\n          />\n        </form>\n\n        <div>\n          <input\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            value=\"Start Recording\"\n            id=\"startRec\"\n            required\n          />\n\n          <input\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            value=\"Stop Recording\"\n            id=\"stopRec\"\n            required\n          />\n        </div>\n      </div>\n      <div id=\"stats\" />\n      <div id=\"info\" className=\"info\" />\n\n      <div id=\"main\" className=\"info\">\n        <video id=\"video\" className=\"videoClass\" playsInline />\n        <canvas id=\"output\" />\n      </div>\n      <div className=\"container\">\n        <video id=\"bijli\" controls></video>\n        <ul id=\"colors\" className=\"info\" />\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Videochat;\n"]},"metadata":{},"sourceType":"module"}