{"ast":null,"code":"import _slicedToArray from \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/videosegmentation/Videochat.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\"; // let Peer = require(\"simple-peer\");\n// import * as Peer from \"simple-peer\";\n\nimport Peer from \"peerjs\"; // let Peer = require(\"simple-peer\");\n// const video = document.querySelector(\"video\");\n\nlet client = {}; // We can also pass an object with width and height for the video parameter of the getUSerMedia\n\nconst Videochat = () => {\n  const _useState = useState({\n    response: \"false\",\n    endpoint: \"http://127.0.0.1:5000\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        socketinfo = _useState2[0],\n        setsocketinfo = _useState2[1];\n\n  const socket = socketIOClient(socketinfo.endpoint);\n  var str = null; //   useEffect(() => {\n  //     const video = document.querySelector(\"video\");\n  //     //Getting our own video\n  //     navigator.mediaDevices\n  //       .getUserMedia({ video: true, audio: true })\n  //       .then(stream => {\n  //         socket.emit(\"NewClient\");\n  //         video.srcObject = stream;\n  //         video.play();\n  //         //Initializing Peer\n  //         function InitPeer(type) {\n  //           if (type == \"init\") {\n  //             console.log(\"BBKIVINES\");\n  //           }\n  //           let peer = new Peer({\n  //             initiator: type == \"init\" ? true : false,\n  //             stream: stream,\n  //             trickle: false\n  //           });\n  //           console.log(peer);\n  //           createVideo(stream);\n  //           peer.on(\"stream\", stream => {\n  //             console.log(\"Streaming\");\n  //             // createVideo(stream);\n  //           });\n  //           peer.on(\"close\", function() {\n  //             document.getElementById(\"peerVideo\").remove();\n  //             peer.destroy();\n  //           });\n  //           return peer;\n  //         }\n  //         //function makePeer to send the offer\n  //         function makePeer() {\n  //           console.log(\"Starting to make peer\");\n  //           client.gotAnswer = false;\n  //           let peer = InitPeer(\"init\");\n  //           console.log(peer);\n  //           peer.on(\"signal\", function(data) {\n  //             if (!client.gotAnswer) {\n  //               socket.emit(\"offer\", data);\n  //             }\n  //           });\n  //           client.peer = peer;\n  //         }\n  //         // FrontAnswer to respond to the offer sent my another client\n  //         function frontAnswer(offer) {\n  //           let peer = InitPeer(\"notInit\");\n  //           peer.on(\"signal\", data => {\n  //             socket.emit(\"Answer\", data);\n  //           });\n  //           peer.signal(offer);\n  //         }\n  //         //signal answer- handles answer from the backend\n  //         function signalAnswer(answer) {\n  //           client.gotAnswer = true;\n  //           let peer = client.peer;\n  //           peer.signal(answer);\n  //         }\n  //         //creating a video element\n  //         function createVideo(stream) {\n  //           let video = document.createElement(\"video\");\n  //           video.id = \"peerVideo\";\n  //           video.srcObject = stream;\n  //           video.class = \"embed-responsive-item\";\n  //           document.querySelector(\"#peerVideo\").appendChild(video);\n  //           video.play();\n  //         }\n  //         function sessionActive() {\n  //           document.write(\"Session already in use- Please come back later\");\n  //         }\n  //         socket.on(\"BackOffer\", frontAnswer);\n  //         socket.on(\"BackAnswer\", signalAnswer);\n  //         socket.on(\"SessionActive\", sessionActive);\n  //         socket.on(\"CreatePeer\", makePeer);\n  //       })\n  //       .catch(err => document.write(err));\n  //     console.log(\"Own Video Started\");\n  //     //create a socket connection\n  //     //ends the function for useEffect hook\n  //     //\n  //   }, []);\n  //video chat2 with peerjs\n\n  useEffect(() => {\n    const video = document.querySelector(\"video\");\n    const peer = new Peer();\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }, stream => {\n      socket.emit(\"NewClient\");\n      video.srcObject = stream;\n      video.play();\n    });\n\n    function initiateUser() {}\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row h-100 w-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Gekk\"), React.createElement(\"div\", {\n    className: \"col-6 col-6 d-flex justify-content-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"embed-responsive embed-responseive-16by9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"video\", {\n    className: \"embed-responsive-item\",\n    muted: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"row h-100 w-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-6 col-6 d-flex justify-content-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"peerVideo\",\n    className: \"embed-responsive embed-responseive-16by9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })))));\n};\n\nexport default Videochat;","map":{"version":3,"sources":["/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/videosegmentation/Videochat.js"],"names":["React","Fragment","useState","useEffect","socketIOClient","Peer","client","Videochat","response","endpoint","socketinfo","setsocketinfo","socket","str","video","document","querySelector","peer","navigator","mediaDevices","getUserMedia","audio","stream","emit","srcObject","play","initiateUser"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CACA;AACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CACA;AAEA;;AACA,IAAIC,MAAM,GAAG,EAAb,C,CAEA;;AACA,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACcL,QAAQ,CAAC;AAC3CM,IAAAA,QAAQ,EAAE,OADiC;AAE3CC,IAAAA,QAAQ,EAAE;AAFiC,GAAD,CADtB;AAAA;AAAA,QACfC,UADe;AAAA,QACHC,aADG;;AAKtB,QAAMC,MAAM,GAAGR,cAAc,CAACM,UAAU,CAACD,QAAZ,CAA7B;AACA,MAAII,GAAG,GAAG,IAAV,CANsB,CAQtB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACA,UAAMC,IAAI,GAAG,IAAIZ,IAAJ,EAAb;AACAa,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CACE;AAAEN,MAAAA,KAAK,EAAE,IAAT;AAAeO,MAAAA,KAAK,EAAE;AAAtB,KADF,EAEEC,MAAM,IAAI;AACRV,MAAAA,MAAM,CAACW,IAAP,CAAY,WAAZ;AACAT,MAAAA,KAAK,CAACU,SAAN,GAAkBF,MAAlB;AACAR,MAAAA,KAAK,CAACW,IAAN;AACD,KANH;;AASA,aAASC,YAAT,GAAwB,CAAE;AAC3B,GAbQ,EAaN,EAbM,CAAT;AAcA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAK,IAAA,SAAS,EAAC,2CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,0CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,SAAS,EAAC,uBAAjB;AAAyC,IAAA,KAAK,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAFF,CADF,EAUE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,2CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,EAAE,EAAC,WADL;AAEE,IAAA,SAAS,EAAC,0CAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAVF,CADF,CADF;AAyBD,CA7ID;;AA+IA,eAAenB,SAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n// let Peer = require(\"simple-peer\");\n// import * as Peer from \"simple-peer\";\nimport Peer from \"peerjs\";\n// let Peer = require(\"simple-peer\");\n\n// const video = document.querySelector(\"video\");\nlet client = {};\n\n// We can also pass an object with width and height for the video parameter of the getUSerMedia\nconst Videochat = () => {\n  const [socketinfo, setsocketinfo] = useState({\n    response: \"false\",\n    endpoint: \"http://127.0.0.1:5000\"\n  });\n  const socket = socketIOClient(socketinfo.endpoint);\n  var str = null;\n\n  //   useEffect(() => {\n  //     const video = document.querySelector(\"video\");\n\n  //     //Getting our own video\n  //     navigator.mediaDevices\n  //       .getUserMedia({ video: true, audio: true })\n  //       .then(stream => {\n  //         socket.emit(\"NewClient\");\n  //         video.srcObject = stream;\n  //         video.play();\n\n  //         //Initializing Peer\n  //         function InitPeer(type) {\n  //           if (type == \"init\") {\n  //             console.log(\"BBKIVINES\");\n  //           }\n  //           let peer = new Peer({\n  //             initiator: type == \"init\" ? true : false,\n  //             stream: stream,\n  //             trickle: false\n  //           });\n  //           console.log(peer);\n  //           createVideo(stream);\n  //           peer.on(\"stream\", stream => {\n  //             console.log(\"Streaming\");\n  //             // createVideo(stream);\n  //           });\n  //           peer.on(\"close\", function() {\n  //             document.getElementById(\"peerVideo\").remove();\n  //             peer.destroy();\n  //           });\n  //           return peer;\n  //         }\n\n  //         //function makePeer to send the offer\n  //         function makePeer() {\n  //           console.log(\"Starting to make peer\");\n  //           client.gotAnswer = false;\n  //           let peer = InitPeer(\"init\");\n  //           console.log(peer);\n  //           peer.on(\"signal\", function(data) {\n  //             if (!client.gotAnswer) {\n  //               socket.emit(\"offer\", data);\n  //             }\n  //           });\n  //           client.peer = peer;\n  //         }\n\n  //         // FrontAnswer to respond to the offer sent my another client\n  //         function frontAnswer(offer) {\n  //           let peer = InitPeer(\"notInit\");\n  //           peer.on(\"signal\", data => {\n  //             socket.emit(\"Answer\", data);\n  //           });\n  //           peer.signal(offer);\n  //         }\n\n  //         //signal answer- handles answer from the backend\n  //         function signalAnswer(answer) {\n  //           client.gotAnswer = true;\n  //           let peer = client.peer;\n  //           peer.signal(answer);\n  //         }\n  //         //creating a video element\n\n  //         function createVideo(stream) {\n  //           let video = document.createElement(\"video\");\n  //           video.id = \"peerVideo\";\n  //           video.srcObject = stream;\n  //           video.class = \"embed-responsive-item\";\n  //           document.querySelector(\"#peerVideo\").appendChild(video);\n  //           video.play();\n  //         }\n\n  //         function sessionActive() {\n  //           document.write(\"Session already in use- Please come back later\");\n  //         }\n  //         socket.on(\"BackOffer\", frontAnswer);\n  //         socket.on(\"BackAnswer\", signalAnswer);\n  //         socket.on(\"SessionActive\", sessionActive);\n  //         socket.on(\"CreatePeer\", makePeer);\n  //       })\n  //       .catch(err => document.write(err));\n\n  //     console.log(\"Own Video Started\");\n\n  //     //create a socket connection\n\n  //     //ends the function for useEffect hook\n\n  //     //\n  //   }, []);\n\n  //video chat2 with peerjs\n  useEffect(() => {\n    const video = document.querySelector(\"video\");\n    const peer = new Peer();\n    navigator.mediaDevices.getUserMedia(\n      { video: true, audio: true },\n      stream => {\n        socket.emit(\"NewClient\");\n        video.srcObject = stream;\n        video.play();\n      }\n    );\n\n    function initiateUser() {}\n  }, []);\n  return (\n    <Fragment>\n      <div className=\"container\">\n        <div className=\"row h-100 w-100\">\n          <p>Gekk</p>\n          <div className=\"col-6 col-6 d-flex justify-content-center\">\n            <div className=\"embed-responsive embed-responseive-16by9\">\n              <video className=\"embed-responsive-item\" muted />\n              {/* We muted the above video as we dont want to hear our own voice  also the above raios and sizes fix the video to cover the entire screen*/}\n            </div>\n          </div>\n        </div>\n        <div className=\"row h-100 w-100\">\n          <div className=\"col-6 col-6 d-flex justify-content-center\">\n            <div\n              id=\"peerVideo\"\n              className=\"embed-responsive embed-responseive-16by9\"\n            >\n              {/* We muted the above video as we dont want to hear our own voice  also the above raios and sizes fix the video to cover the entire screen*/}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Videochat;\n"]},"metadata":{},"sourceType":"module"}