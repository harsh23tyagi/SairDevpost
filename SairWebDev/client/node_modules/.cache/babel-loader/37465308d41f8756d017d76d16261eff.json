{"ast":null,"code":"var _jsxFileName = \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/videosegmentation/videosegmentation.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport img from \"./image1.jpg\";\nimport * as bodyPix from \"@tensorflow-models/body-pix\";\nimport \"../../Self.css\"; // New Imports for videoSegmentation\n\nimport dat from \"dat.gui\";\nimport Stats from \"stats.js\"; //End of imports\n\nconst videosegmentation = () => {\n  const loadAndUseBodyPix = async e => {\n    // async function loadAndUseBodyPix() {\n    e.preventDefault();\n    const net = await bodyPix.load(); // BodyPix model loaded\n\n    const imageElement = document.getElementById(\"image\");\n    console.log(\"Loaded\"); // load the BodyPix model from a checkpoint\n    // arguments for estimating person segmentation.\n\n    const outputStride = 16;\n    const segmentationThreshold = 0.5;\n    const personSegmentation = await net.estimatePersonSegmentation(imageElement, outputStride, segmentationThreshold);\n    console.log(personSegmentation);\n    console.log(\"Reached\");\n    console.log(\"Masking the image\"); // Masking the image\n\n    const segmentation = await net.estimatePersonSegmentation(imageElement);\n    const maskBackground = true; // Convert the personSegmentation into a mask to darken the background.\n\n    const backgroundDarkeningMask = bodyPix.toMaskImageData(personSegmentation, maskBackground);\n    const opacity = 0.7;\n    const canvas = document.getElementById(\"canvas\"); // draw the mask onto the image on a canvas.  With opacity set to 0.7 this will darken the background.\n\n    bodyPix.drawMask(canvas, imageElement, backgroundDarkeningMask, opacity);\n    console.log(\"Image Masked\");\n    console.log(\"Estimating Part Segmentation...\");\n    const partSegmentation = await net.estimatePartSegmentation(imageElement, outputStride, segmentationThreshold);\n    console.log(\"Part Segmentation Results:\");\n    console.log(partSegmentation);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"headerVidSeg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Video Segmentation\"), React.createElement(\"div\", {\n    id: \"stats\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"info\",\n    className: \"info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"main\",\n    className: \"info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"video\", {\n    id: \"video\",\n    className: \"videoClass\",\n    playsinline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"canvas\", {\n    id: \"output\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), React.createElement(\"ul\", {\n    id: \"colors\",\n    className: \"info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    class: \"footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    class: \"footer-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"The BodyPix model can estimate which pixels in an image are part of a person, and which pixels are part of each of 24 body parts. It works on a single person, and such \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"works best\"), \" when\", \" \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"one person is present\"), \" in an image.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), \"The \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"output stride\"), \" and\", \" \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"model (indicated by mobileNetArchitecture)\"), \" have the largest effects on accuracy/speed. A \", React.createElement(\"i\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"higher\"), \" output stride results in lower accuracy but higher speed. A \", React.createElement(\"i\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"larger\"), \" model, indicated by the \", React.createElement(\"i\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"mobileNetArchitecture\"), \" dropdown, results in higher accuracy but lower speed.\"), React.createElement(\"div\", {\n    class: \"footer-menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    class: \"material-icons switch-camera\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"switch_camera\"), React.createElement(\"i\", {\n    class: \"material-icons mask mode active\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"portrait\"), React.createElement(\"i\", {\n    class: \"material-icons mode bokeh\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"blur_on\"), React.createElement(\"i\", {\n    class: \"material-icons mode part-map\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"format_color_fill\"), React.createElement(\"i\", {\n    class: \"material-icons high-accuracy\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"high_quality\")))));\n};\n\nconsole.log(\"Hello\");\nconsole.log(\"Bigshot\");\nexport default videosegmentation; // {/* <form className=\"form\" onSubmit={e => loadAndUseBodyPix(e)}>\n\n{\n  /* <h1 className=\"headerVidSeg\">Reached Video Segmentation Page</h1>\n  <div id=\"divid1\">\n  <img src={img} id=\"image\" />\n  </div>\n  <br />\n  <input\n  type=\"submit\"\n  className=\"btn btn-primary\"\n  value=\"Segment Image\"\n  required\n  />\n  </form>\n  <br />\n  <canvas id=\"canvas\" width=\"100%\" />  */\n}","map":{"version":3,"sources":["/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/videosegmentation/videosegmentation.js"],"names":["React","axios","img","bodyPix","dat","Stats","videosegmentation","loadAndUseBodyPix","e","preventDefault","net","load","imageElement","document","getElementById","console","log","outputStride","segmentationThreshold","personSegmentation","estimatePersonSegmentation","segmentation","maskBackground","backgroundDarkeningMask","toMaskImageData","opacity","canvas","drawMask","partSegmentation","estimatePartSegmentation"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport img from \"./image1.jpg\";\nimport * as bodyPix from \"@tensorflow-models/body-pix\";\nimport \"../../Self.css\";\n\n// New Imports for videoSegmentation\nimport dat from \"dat.gui\";\nimport Stats from \"stats.js\";\n\n//End of imports\nconst videosegmentation = () => {\n  const loadAndUseBodyPix = async e => {\n    // async function loadAndUseBodyPix() {\n    e.preventDefault();\n    const net = await bodyPix.load();\n    // BodyPix model loaded\n    const imageElement = document.getElementById(\"image\");\n    console.log(\"Loaded\");\n    // load the BodyPix model from a checkpoint\n\n    // arguments for estimating person segmentation.\n    const outputStride = 16;\n    const segmentationThreshold = 0.5;\n\n    const personSegmentation = await net.estimatePersonSegmentation(\n      imageElement,\n      outputStride,\n      segmentationThreshold\n    );\n    console.log(personSegmentation);\n    console.log(\"Reached\");\n\n    console.log(\"Masking the image\");\n    // Masking the image\n    const segmentation = await net.estimatePersonSegmentation(imageElement);\n\n    const maskBackground = true;\n    // Convert the personSegmentation into a mask to darken the background.\n    const backgroundDarkeningMask = bodyPix.toMaskImageData(\n      personSegmentation,\n      maskBackground\n    );\n\n    const opacity = 0.7;\n\n    const canvas = document.getElementById(\"canvas\");\n    // draw the mask onto the image on a canvas.  With opacity set to 0.7 this will darken the background.\n    bodyPix.drawMask(canvas, imageElement, backgroundDarkeningMask, opacity);\n    console.log(\"Image Masked\");\n    console.log(\"Estimating Part Segmentation...\");\n    const partSegmentation = await net.estimatePartSegmentation(\n      imageElement,\n      outputStride,\n      segmentationThreshold\n    );\n    console.log(\"Part Segmentation Results:\");\n    console.log(partSegmentation);\n  };\n\n  return (\n    <div className=\"container\">\n      {/* --Container Begins-- */}\n      <h1 className=\"headerVidSeg\">Video Segmentation</h1>\n      <div id=\"stats\" />\n      <div id=\"info\" className=\"info\" />\n\n      <div id=\"main\" className=\"info\">\n        <video id=\"video\" className=\"videoClass\" playsinline />\n        <canvas id=\"output\" />\n      </div>\n\n      <ul id=\"colors\" className=\"info\" />\n\n      <div class=\"footer\">\n        <div class=\"footer-text\">\n          <p>\n            The BodyPix model can estimate which pixels in an image are part of\n            a person, and which pixels are part of each of 24 body parts. It\n            works on a single person, and such <strong>works best</strong> when{\" \"}\n            <strong>one person is present</strong> in an image.\n            <br />\n            <br />\n            The <strong>output stride</strong> and{\" \"}\n            <strong>model (indicated by mobileNetArchitecture)</strong> have the\n            largest effects on accuracy/speed. A <i>higher</i> output stride\n            results in lower accuracy but higher speed. A <i>larger</i> model,\n            indicated by the <i>mobileNetArchitecture</i> dropdown, results in\n            higher accuracy but lower speed.\n          </p>\n          <div class=\"footer-menu\">\n            <i class=\"material-icons switch-camera\">switch_camera</i>\n            <i class=\"material-icons mask mode active\">portrait</i>\n            <i class=\"material-icons mode bokeh\">blur_on</i>\n            <i class=\"material-icons mode part-map\">format_color_fill</i>\n            <i class=\"material-icons high-accuracy\">high_quality</i>\n          </div>\n        </div>\n      </div>\n\n      {/* --Container Ends-- */}\n    </div>\n  );\n};\nconsole.log(\"Hello\");\n\nconsole.log(\"Bigshot\");\nexport default videosegmentation;\n\n// {/* <form className=\"form\" onSubmit={e => loadAndUseBodyPix(e)}>\n{\n  /* <h1 className=\"headerVidSeg\">Reached Video Segmentation Page</h1>\n<div id=\"divid1\">\n  <img src={img} id=\"image\" />\n</div>\n\n<br />\n<input\n  type=\"submit\"\n  className=\"btn btn-primary\"\n  value=\"Segment Image\"\n  required\n/>\n</form>\n<br />\n<canvas id=\"canvas\" width=\"100%\" />  */\n}\n"]},"metadata":{},"sourceType":"module"}