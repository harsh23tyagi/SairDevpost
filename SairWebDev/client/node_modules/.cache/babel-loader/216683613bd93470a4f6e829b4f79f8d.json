{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Emitter = require('events').EventEmitter;\n/**\n * Module exports.\n */\n\n\nmodule.exports = Adapter;\n/**\n * Memory adapter constructor.\n *\n * @param {Namespace} nsp\n * @api public\n */\n\nfunction Adapter(nsp) {\n  this.nsp = nsp;\n  this.rooms = {};\n  this.sids = {};\n  this.encoder = nsp.server.encoder;\n}\n/**\n * Inherits from `EventEmitter`.\n */\n\n\nAdapter.prototype.__proto__ = Emitter.prototype;\n/**\n * Adds a socket to a room.\n *\n * @param {String} socket id\n * @param {String} room name\n * @param {Function} callback\n * @api public\n */\n\nAdapter.prototype.add = function (id, room, fn) {\n  return this.addAll(id, [room], fn);\n};\n/**\n * Adds a socket to a list of room.\n *\n * @param {String} socket id\n * @param {String} rooms\n * @param {Function} callback\n * @api public\n */\n\n\nAdapter.prototype.addAll = function (id, rooms, fn) {\n  for (var i = 0; i < rooms.length; i++) {\n    var room = rooms[i];\n    this.sids[id] = this.sids[id] || {};\n    this.sids[id][room] = true;\n    this.rooms[room] = this.rooms[room] || Room();\n    this.rooms[room].add(id);\n  }\n\n  if (fn) process.nextTick(fn.bind(null, null));\n};\n/**\n * Removes a socket from a room.\n *\n * @param {String} socket id\n * @param {String} room name\n * @param {Function} callback\n * @api public\n */\n\n\nAdapter.prototype.del = function (id, room, fn) {\n  this.sids[id] = this.sids[id] || {};\n  delete this.sids[id][room];\n\n  if (this.rooms.hasOwnProperty(room)) {\n    this.rooms[room].del(id);\n    if (this.rooms[room].length === 0) delete this.rooms[room];\n  }\n\n  if (fn) process.nextTick(fn.bind(null, null));\n};\n/**\n * Removes a socket from all rooms it's joined.\n *\n * @param {String} socket id\n * @param {Function} callback\n * @api public\n */\n\n\nAdapter.prototype.delAll = function (id, fn) {\n  var rooms = this.sids[id];\n\n  if (rooms) {\n    for (var room in rooms) {\n      if (this.rooms.hasOwnProperty(room)) {\n        this.rooms[room].del(id);\n        if (this.rooms[room].length === 0) delete this.rooms[room];\n      }\n    }\n  }\n\n  delete this.sids[id];\n  if (fn) process.nextTick(fn.bind(null, null));\n};\n/**\n * Broadcasts a packet.\n *\n * Options:\n *  - `flags` {Object} flags for this packet\n *  - `except` {Array} sids that should be excluded\n *  - `rooms` {Array} list of rooms to broadcast to\n *\n * @param {Object} packet object\n * @api public\n */\n\n\nAdapter.prototype.broadcast = function (packet, opts) {\n  var rooms = opts.rooms || [];\n  var except = opts.except || [];\n  var flags = opts.flags || {};\n  var packetOpts = {\n    preEncoded: true,\n    volatile: flags.volatile,\n    compress: flags.compress\n  };\n  var ids = {};\n  var self = this;\n  var socket;\n  packet.nsp = this.nsp.name;\n  this.encoder.encode(packet, function (encodedPackets) {\n    if (rooms.length) {\n      for (var i = 0; i < rooms.length; i++) {\n        var room = self.rooms[rooms[i]];\n        if (!room) continue;\n        var sockets = room.sockets;\n\n        for (var id in sockets) {\n          if (sockets.hasOwnProperty(id)) {\n            if (ids[id] || ~except.indexOf(id)) continue;\n            socket = self.nsp.connected[id];\n\n            if (socket) {\n              socket.packet(encodedPackets, packetOpts);\n              ids[id] = true;\n            }\n          }\n        }\n      }\n    } else {\n      for (var id in self.sids) {\n        if (self.sids.hasOwnProperty(id)) {\n          if (~except.indexOf(id)) continue;\n          socket = self.nsp.connected[id];\n          if (socket) socket.packet(encodedPackets, packetOpts);\n        }\n      }\n    }\n  });\n};\n/**\n * Gets a list of clients by sid.\n *\n * @param {Array} explicit set of rooms to check.\n * @param {Function} callback\n * @api public\n */\n\n\nAdapter.prototype.clients = function (rooms, fn) {\n  if ('function' == typeof rooms) {\n    fn = rooms;\n    rooms = null;\n  }\n\n  rooms = rooms || [];\n  var ids = {};\n  var sids = [];\n  var socket;\n\n  if (rooms.length) {\n    for (var i = 0; i < rooms.length; i++) {\n      var room = this.rooms[rooms[i]];\n      if (!room) continue;\n      var sockets = room.sockets;\n\n      for (var id in sockets) {\n        if (sockets.hasOwnProperty(id)) {\n          if (ids[id]) continue;\n          socket = this.nsp.connected[id];\n\n          if (socket) {\n            sids.push(id);\n            ids[id] = true;\n          }\n        }\n      }\n    }\n  } else {\n    for (var id in this.sids) {\n      if (this.sids.hasOwnProperty(id)) {\n        socket = this.nsp.connected[id];\n        if (socket) sids.push(id);\n      }\n    }\n  }\n\n  if (fn) process.nextTick(fn.bind(null, null, sids));\n};\n/**\n * Gets the list of rooms a given client has joined.\n *\n * @param {String} socket id\n * @param {Function} callback\n * @api public\n */\n\n\nAdapter.prototype.clientRooms = function (id, fn) {\n  var rooms = this.sids[id];\n  if (fn) process.nextTick(fn.bind(null, null, rooms ? Object.keys(rooms) : null));\n};\n/**\n* Room constructor.\n*\n* @api private\n*/\n\n\nfunction Room() {\n  if (!(this instanceof Room)) return new Room();\n  this.sockets = {};\n  this.length = 0;\n}\n/**\n * Adds a socket to a room.\n *\n * @param {String} socket id\n * @api private\n */\n\n\nRoom.prototype.add = function (id) {\n  if (!this.sockets.hasOwnProperty(id)) {\n    this.sockets[id] = true;\n    this.length++;\n  }\n};\n/**\n * Removes a socket from a room.\n *\n * @param {String} socket id\n * @api private\n */\n\n\nRoom.prototype.del = function (id) {\n  if (this.sockets.hasOwnProperty(id)) {\n    delete this.sockets[id];\n    this.length--;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}