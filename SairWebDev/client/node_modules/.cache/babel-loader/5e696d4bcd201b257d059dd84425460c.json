{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar http = require('http');\n/**\n * Invoking the library as a function delegates to attach if the first argument\n * is an `http.Server`.\n *\n * If there are no arguments or the first argument is an options object, then\n * a new Server instance is returned.\n *\n * @param {http.Server} server (if specified, will be attached to by the new Server instance)\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\n\nexports = module.exports = function () {\n  // backwards compatible use as `.attach`\n  // if first argument is an http server\n  if (arguments.length && arguments[0] instanceof http.Server) {\n    return attach.apply(this, arguments);\n  } // if first argument is not an http server, then just make a regular eio server\n\n\n  return exports.Server.apply(null, arguments);\n};\n/**\n * Protocol revision number.\n *\n * @api public\n */\n\n\nexports.protocol = 1;\n/**\n * Expose Server constructor.\n *\n * @api public\n */\n\nexports.Server = require('./server');\n/**\n * Expose Socket constructor.\n *\n * @api public\n */\n\nexports.Socket = require('./socket');\n/**\n * Expose Transport constructor.\n *\n * @api public\n */\n\nexports.Transport = require('./transport');\n/**\n * Expose mutable list of available transports.\n *\n * @api public\n */\n\nexports.transports = require('./transports');\n/**\n * Exports parser.\n *\n * @api public\n */\n\nexports.parser = require('engine.io-parser');\n/**\n * Creates an http.Server exclusively used for WS upgrades.\n *\n * @param {Number} port\n * @param {Function} callback\n * @param {Object} options\n * @return {Server} websocket.io server\n * @api public\n */\n\nexports.listen = listen;\n\nfunction listen(port, options, fn) {\n  if ('function' === typeof options) {\n    fn = options;\n    options = {};\n  }\n\n  var server = http.createServer(function (req, res) {\n    res.writeHead(501);\n    res.end('Not Implemented');\n  }); // create engine server\n\n  var engine = exports.attach(server, options);\n  engine.httpServer = server;\n  server.listen(port, fn);\n  return engine;\n}\n/**\n * Captures upgrade requests for a http.Server.\n *\n * @param {http.Server} server\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\n\nexports.attach = attach;\n\nfunction attach(server, options) {\n  var engine = new exports.Server(options);\n  engine.attach(server, options);\n  return engine;\n}","map":null,"metadata":{},"sourceType":"script"}