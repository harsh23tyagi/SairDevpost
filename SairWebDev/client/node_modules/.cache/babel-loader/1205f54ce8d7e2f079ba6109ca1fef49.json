{"ast":null,"code":"import _slicedToArray from \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/videosegmentation/Videochat.js\";\nimport React, { Fragment, useState, useEffect } from \"react\"; // let Peer = require(\"simple-peer\");\n// import * as Peer from \"simple-peer\";\n\nlet Peer = require(\"simple-peer\");\n\nimport socketIOClient from \"socket.io-client\"; // const video = document.querySelector(\"video\");\n// let client = {};\n// We can also pass an object with width and height for the video parameter of the getUSerMedia\n\nconst Videochat = () => {\n  const _useState = useState({\n    response: \"false\",\n    endpoint: \"http://127.0.0.1:5000\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        socketinfo = _useState2[0],\n        setsocketinfo = _useState2[1];\n\n  const socket = socketIOClient(socketinfo.endpoint);\n  var str = null;\n  useEffect(() => {\n    const video = document.querySelector(\"video\"); //Getting our own video\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      socket.emit(\"NewClient\");\n      video.srcObject = stream;\n      video.play();\n    }).catch(err => document.write(err));\n    console.log(\"Own Video Started\"); //Initializing Peer\n\n    function InitPeer(type) {\n      let peer = new Peer({\n        initiator: type == \"init\" ? true : false,\n        stream: stream,\n        trickle: false\n      });\n    } //ends the function for useEffect hook\n\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row h-100 w-100\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Gekk\"), React.createElement(\"div\", {\n    className: \"col-12 col-6 d-flex justify-content-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"embed-responsive embed-responseive-16by9\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"video\", {\n    className: \"embed-responsive-item\",\n    muted: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }))))));\n};\n\nexport default Videochat;","map":{"version":3,"sources":["/Users/harshtyagi/Documents/Sair/React2/Middleware/client/src/components/videosegmentation/Videochat.js"],"names":["React","Fragment","useState","useEffect","Peer","require","socketIOClient","Videochat","response","endpoint","socketinfo","setsocketinfo","socket","str","video","document","querySelector","navigator","mediaDevices","getUserMedia","audio","then","stream","emit","srcObject","play","catch","err","write","console","log","InitPeer","type","peer","initiator","trickle"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD,C,CAEA;AACA;;AACA,IAAIC,IAAI,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CACA;AACA;AAEA;;AACA,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACcL,QAAQ,CAAC;AAC3CM,IAAAA,QAAQ,EAAE,OADiC;AAE3CC,IAAAA,QAAQ,EAAE;AAFiC,GAAD,CADtB;AAAA;AAAA,QACfC,UADe;AAAA,QACHC,aADG;;AAKtB,QAAMC,MAAM,GAAGN,cAAc,CAACI,UAAU,CAACD,QAAZ,CAA7B;AACA,MAAII,GAAG,GAAG,IAAV;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd,CADc,CAGd;;AACAC,IAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgB;AAAEL,MAAAA,KAAK,EAAE,IAAT;AAAeM,MAAAA,KAAK,EAAE;AAAtB,KADhB,EAEGC,IAFH,CAEQC,MAAM,IAAI;AACdV,MAAAA,MAAM,CAACW,IAAP,CAAY,WAAZ;AACAT,MAAAA,KAAK,CAACU,SAAN,GAAkBF,MAAlB;AACAR,MAAAA,KAAK,CAACW,IAAN;AACD,KANH,EAOGC,KAPH,CAOSC,GAAG,IAAIZ,QAAQ,CAACa,KAAT,CAAeD,GAAf,CAPhB;AASAE,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAbc,CAed;;AACA,aAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,UAAIC,IAAI,GAAG,IAAI7B,IAAJ,CAAS;AAClB8B,QAAAA,SAAS,EAAEF,IAAI,IAAI,MAAR,GAAiB,IAAjB,GAAwB,KADjB;AAElBV,QAAAA,MAAM,EAAEA,MAFU;AAGlBa,QAAAA,OAAO,EAAE;AAHS,OAAT,CAAX;AAKD,KAtBa,CAwBd;;AACD,GAzBQ,EAyBN,EAzBM,CAAT;AA0BA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAK,IAAA,SAAS,EAAC,4CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,0CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,SAAS,EAAC,uBAAjB;AAAyC,IAAA,KAAK,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAFF,CADF,CADF,CADF;AAeD,CAjDD;;AAmDA,eAAe5B,SAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\n\n// let Peer = require(\"simple-peer\");\n// import * as Peer from \"simple-peer\";\nlet Peer = require(\"simple-peer\");\nimport socketIOClient from \"socket.io-client\";\n// const video = document.querySelector(\"video\");\n// let client = {};\n\n// We can also pass an object with width and height for the video parameter of the getUSerMedia\nconst Videochat = () => {\n  const [socketinfo, setsocketinfo] = useState({\n    response: \"false\",\n    endpoint: \"http://127.0.0.1:5000\"\n  });\n  const socket = socketIOClient(socketinfo.endpoint);\n  var str = null;\n\n  useEffect(() => {\n    const video = document.querySelector(\"video\");\n\n    //Getting our own video\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then(stream => {\n        socket.emit(\"NewClient\");\n        video.srcObject = stream;\n        video.play();\n      })\n      .catch(err => document.write(err));\n\n    console.log(\"Own Video Started\");\n\n    //Initializing Peer\n    function InitPeer(type) {\n      let peer = new Peer({\n        initiator: type == \"init\" ? true : false,\n        stream: stream,\n        trickle: false\n      });\n    }\n\n    //ends the function for useEffect hook\n  }, []);\n  return (\n    <Fragment>\n      <div className=\"container\">\n        <div className=\"row h-100 w-100\">\n          <p>Gekk</p>\n          <div className=\"col-12 col-6 d-flex justify-content-center\">\n            <div className=\"embed-responsive embed-responseive-16by9\">\n              <video className=\"embed-responsive-item\" muted />\n              {/* We muted the above video as we dont want to hear our own voice  also the above raios and sizes fix the video to cover the entire screen*/}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Videochat;\n"]},"metadata":{},"sourceType":"module"}