{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Transport = require('../transport');\n\nvar parser = require('engine.io-parser');\n\nvar util = require('util');\n\nvar debug = require('debug')('engine:ws');\n/**\n * Export the constructor.\n */\n\n\nmodule.exports = WebSocket;\n/**\n * WebSocket transport\n *\n * @param {http.IncomingMessage}\n * @api public\n */\n\nfunction WebSocket(req) {\n  Transport.call(this, req);\n  var self = this;\n  this.socket = req.websocket;\n  this.socket.on('message', this.onData.bind(this));\n  this.socket.once('close', this.onClose.bind(this));\n  this.socket.on('error', this.onError.bind(this));\n  this.socket.on('headers', onHeaders);\n  this.writable = true;\n  this.perMessageDeflate = null;\n\n  function onHeaders(headers) {\n    self.emit('headers', headers);\n  }\n}\n/**\n * Inherits from Transport.\n */\n\n\nutil.inherits(WebSocket, Transport);\n/**\n * Transport name\n *\n * @api public\n */\n\nWebSocket.prototype.name = 'websocket';\n/**\n * Advertise upgrade support.\n *\n * @api public\n */\n\nWebSocket.prototype.handlesUpgrades = true;\n/**\n * Advertise framing support.\n *\n * @api public\n */\n\nWebSocket.prototype.supportsFraming = true;\n/**\n * Processes the incoming data.\n *\n * @param {String} encoded packet\n * @api private\n */\n\nWebSocket.prototype.onData = function (data) {\n  debug('received \"%s\"', data);\n  Transport.prototype.onData.call(this, data);\n};\n/**\n * Writes a packet payload.\n *\n * @param {Array} packets\n * @api private\n */\n\n\nWebSocket.prototype.send = function (packets) {\n  var self = this;\n\n  for (var i = 0; i < packets.length; i++) {\n    var packet = packets[i];\n    parser.encodePacket(packet, self.supportsBinary, send);\n  }\n\n  function send(data) {\n    debug('writing \"%s\"', data); // always creates a new object since ws modifies it\n\n    var opts = {};\n\n    if (packet.options) {\n      opts.compress = packet.options.compress;\n    }\n\n    if (self.perMessageDeflate) {\n      var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;\n\n      if (len < self.perMessageDeflate.threshold) {\n        opts.compress = false;\n      }\n    }\n\n    self.writable = false;\n    self.socket.send(data, opts, onEnd);\n  }\n\n  function onEnd(err) {\n    if (err) return self.onError('write error', err.stack);\n    self.writable = true;\n    self.emit('drain');\n  }\n};\n/**\n * Closes the transport.\n *\n * @api private\n */\n\n\nWebSocket.prototype.doClose = function (fn) {\n  debug('closing');\n  this.socket.close();\n  fn && fn();\n};","map":null,"metadata":{},"sourceType":"script"}