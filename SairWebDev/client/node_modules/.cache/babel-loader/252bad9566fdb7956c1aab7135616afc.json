{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Polling = require('./polling');\n\nvar qs = require('querystring');\n\nvar rDoubleSlashes = /\\\\\\\\n/g;\nvar rSlashes = /(\\\\)?\\\\n/g;\n\nvar util = require('util');\n/**\n * Module exports.\n */\n\n\nmodule.exports = JSONP;\n/**\n * JSON-P polling transport.\n *\n * @api public\n */\n\nfunction JSONP(req) {\n  Polling.call(this, req);\n  this.head = '___eio[' + (req._query.j || '').replace(/[^0-9]/g, '') + '](';\n  this.foot = ');';\n}\n/**\n * Inherits from Polling.\n */\n\n\nutil.inherits(JSONP, Polling);\n/**\n * Handles incoming data.\n * Due to a bug in \\n handling by browsers, we expect a escaped string.\n *\n * @api private\n */\n\nJSONP.prototype.onData = function (data) {\n  // we leverage the qs module so that we get built-in DoS protection\n  // and the fast alternative to decodeURIComponent\n  data = qs.parse(data).d;\n\n  if ('string' === typeof data) {\n    // client will send already escaped newlines as \\\\\\\\n and newlines as \\\\n\n    // \\\\n must be replaced with \\n and \\\\\\\\n with \\\\n\n    data = data.replace(rSlashes, function (match, slashes) {\n      return slashes ? match : '\\n';\n    });\n    Polling.prototype.onData.call(this, data.replace(rDoubleSlashes, '\\\\n'));\n  }\n};\n/**\n * Performs the write.\n *\n * @api private\n */\n\n\nJSONP.prototype.doWrite = function (data, options, callback) {\n  // we must output valid javascript, not valid json\n  // see: http://timelessrepo.com/json-isnt-a-javascript-subset\n  var js = JSON.stringify(data).replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029'); // prepare response\n\n  data = this.head + js + this.foot;\n  Polling.prototype.doWrite.call(this, data, options, callback);\n};","map":null,"metadata":{},"sourceType":"script"}